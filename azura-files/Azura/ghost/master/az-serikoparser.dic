
Select.chooseShell
{
	_shellpaths = FENUM("../../../shell/")
	"%(lsto)Which shell are you on ?\f[italic,false]\n\n[half]\_q"
	--
	_shells = ""
	foreach _shellpaths ; _path
	{
		_shells = _shells + "\_a[%(_path)]\_q\![*]%(_path)\_a"+"\_q\n"
	}
	"%(_shells)"
	
}

Select.scanShellMenu
{
	posecreated = ""
	"\0%(lsta)What do you want to do with the shell ?\f[italic,false]\_q\n\n[half]"
	--
	"\![*]\q[Create a pose,createShellPose]\n\![*]\q[Check the shell,checkShellPose]\n\![*]\q[Edit the filters,editShellFilters]"
	
}

Select.createShellPose
{
	posecreated = "\s["
	"\0\_q\b2%(lsto)Which surface do you want ?\f[italic,false]\n\n[half]\_q%(SurfacesList)\_q"
	--
	"\n\n[half]\![*]\q[Go back,scanShellMenu]"
}

Select.checkShellPose
{
	posecreated = ""
	"\0\b2\_q%(lsto)Which surface do you want ?\f[italic,false]\n\n[half]\_q%(SurfacesList)\_q"
	--
	"\n\n[half]\![*]\q[Go back,scanShellMenu]"
}


Select.addintervaltopose
{
	posecreated += "\i[%(intervaltargeted[0])]"
	IntervalDescription
}

Select.removeintervaltopose
{
	posecreated = REPLACE(posecreated,"\i[%(intervaltargeted[0])]","")
	IntervalDescription
}

Select.backintervallist
{
	IntervalsList
}

Select.opennewposefile
{
	_i = FOPEN("pose.txt","w")
	_i = FWRITE("pose.txt","%(posecreated)")
	_i = FCLOSE("pose.txt")
	"\![open,file,pose.txt]\0%(lsto)* Here is the pose you created."
}

ContainsKeyword
{
	_word = _argv[0]
	_list = SPLIT(_argv[1],",")
	foreach _list; _elem
	{
		if TOLOWER(_elem) _in_ TOLOWER(_word)
		{
			1
			return
		}
	}
	0
}

SurfaceDescription
{
	"\0\b2\_q%(lsta)Current surface :\n\n[half]\f[italic,false] - Surface %(surfacetargeted[0])"
	--
	if surfacetargeted[1]!= ""
	{
		" : %(surfacetargeted[1])"
	}
	--
	if surfacetargeted[2] != ""
	{
		"\n - Catergory : %(surfacetargeted[2])"
	}
	--
	if "\s[" _in_ posecreated
	{
		"\n\n[half]\![*]\q[Finish the pose,opennewposefile]"
	}
	--
	"\n\n[half]\![*]\q[Go back,backintervallist]"
}


SurfacesList
{
	_surfaces = ""
	if ARRAYSIZE(surfacesfilter) != 0
	{
		foreach surfaceslist ; _surface
		{
			if ContainsKeyword(_surface[1],"%(surfacesfilter)") || ContainsKeyword(_surface[2],"%(surfacesfilter)")
			{
				_surfaces = _surfaces + "\_a[surface%(_surface[0])]\_q\![*]%(_surface[1])\_a"+"\_q\n"
			}
		}
	}
	elseif surfaceswithname == 1
	{
		foreach surfaceslist ; _surface
		{
			if _surface[1] != ""
			{
				_surfaces = _surfaces + "\_a[surface%(_surface[0])]\_q\![*]%(_surface[1])\_a"+"\_q\n"
			}
		}
	}
	else
	{
		foreach surfaceslist ; _surface
		{
			_surfaces = _surfaces + "\_a[surface%(_surface[0])]\_q\![*]%(_surface[1])\_a"+"\_q\n"
		}
	}
	"%(_surfaces)"
	
	
}

IntervalDescription
{
	"\0\b2\_q%(lsta)Current surface :\n\n[half]\f[italic,false] - Surface %(surfacetargeted[0])"
	--
	if surfacetargeted[1] != ""
	{
		" : %(surfacetargeted[1])"
	}
	--
	"\n\n[half]\0%(lsta)The interval :\n\n[half]\f[italic,false] - Interval %(intervaltargeted[0])"
	--
	if intervaltargeted[1] != ""
	{
		" : %(intervaltargeted[1])"
	}
	--
	if intervaltargeted[2] != ""
	{
		"\n - Catergory : %(intervaltargeted[3])"
	}
	--
	"\n - Type : %(intervaltargeted[4])"
	--
	if "\s[" _in_ posecreated
	{
		
		"\n\n[half] - Current pose : " + REPLACE(posecreated,"\","\\") + "\n"
		--
		"\n[half]\![*]\q[Apply it to the ghost,applycreatedpose]\n\![!]\q[Add it,addintervaltopose]"
		--
		if "\i[%(intervaltargeted[0])]" _in_ posecreated
		{
			"     \![*]\q[Remove it,removeintervaltopose]"
		}
		--
		"\n\![*]\q[Finish the pose,opennewposefile]"
	}
	--
	"\n\n[half]\![*]\q[Go back,backintervallist]"
}


IntervalsList
{
	intervaltargeted = ""
	if "\s[" _in_ posecreated && "\s[%(surfacetargeted[0])]" !_in_ posecreated
	{
		posecreated += "%(surfacetargeted[0])]"
	}
	"\0%(lsta)\b2\_qWhat intervals do you want ?\f[italic,false]\n\n[half]\_q"
	--
	_intervals = ""
	if surfacetargeted != ""
	{
		if ARRAYSIZE(intervalsfilter) != 0
		{
			foreach intervalslist ; _interval
			{
				if (ContainsKeyword(_interval[1],"%(intervalsfilter)") || ContainsKeyword(_interval[3],"%(intervalsfilter)")) && _interval[2] == surfacetargeted[0]
				{
					_intervals = _intervals + "\_a[interval%(_interval[0])]\_q\![*]%(_interval[1])\_a"+"\_q\n"
				}
			}
		}
		elseif intervalswithname == 1
		{
			foreach intervalslist ; _interval
			{
				if _interval[1] != "" && _interval[2] == surfacetargeted[0]
				{
					_intervals = _intervals + "\_a[interval%(_interval[0])]\_q\![*]%(_interval[1])\_a"+"\_q\n"
				}
			}
		}
		else
		{
			foreach intervalslist ; _interval
			{
				if _interval[2] == surfacetargeted[0]
				{
					_intervals = _intervals + "\_a[interval%(_interval[0])]\_q\![*]%(_interval[1])\_a"+"\_q\n"
				}
			}
		}

	}
	else
	{	
		if ARRAYSIZE(intervalsfilter) != 0
		{
			foreach intervalslist ; _interval
			{
				if ContainsKeyword(_interval[1],"%(intervalsfilter)")
				{
					_intervals = _intervals + "\_a[interval%(_interval[0])]\_q\![*]%(_interval[1])\_a"+"\_q\n"
				}
			}
		}
		elseif intervalswithname == 1
		{
			foreach intervalslist ; _interval
			{
				if surfacetargeted[1] != ""
				{
					_intervals = _intervals + "\_a[interval%(_interval[0])]\_q\![*]%(_interval[1])\_a"+"\_q\n"
				}
			}
		}
		else
		{
			foreach intervalslist ; _interval
			{
				_intervals = _intervals + "\_a[interval%(_interval[0])]\_q\![*]%(_interval[1])\_a"+"\_q\n"
			}
		}
	}
	"%(_intervals)\_q"
	
	--
	if "\s[" _in_ posecreated
	{
		_temp = REPLACE(posecreated,"\","\\")
		"\n\n[half]Current pose : %(_temp)"	
		--
		"\n\n[half]\![*]\q[Surface information,getsurfaceinformation]\n\![*]\q[Apply the pose,applycreatingposefrommenu]\n\![*]\q[Finish the pose,opennewposefile]\n[half]\n\![*]\q[Go back,createShellPose]"
	}
	else
	{
		"\n\n[half]\![*]\q[Surface information,getsurfaceinformation]\n\![*]\q[Go back,checkShellPose]"
	}

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Select.editShellFilters
{
	//surfacesfilter = IARRAY
	///intervalsfilter = IARRAY
	filtersuppr = 0
	"\0%(lsta)What filter do you want to edit ?\n\n[half]\_q"
	--
	"\![*]\q[Display surfaces without a name,displaySurfacesWithName] \n        \f[italic,true](currently "
	--
	if surfaceswithname == 1
	{
		"no"
	}
	else
	{
		"yes"
	}
	--
	")\f[italic,false]\n/\![*]\q[Display intervals without a name,displayIntervalsWithName] \n        \f[italic,true](currently "
	--
	if intervalswithname == 1
	{
		"no"
	}
	else
	{
		"yes"
	}
	--
	")\f[italic,false]\n/\![*]\q[Surfaces name filter,displaySurfacesFilter] \n        \f[italic,true](currently "
	--
	if ARRAYSIZE(surfacesfilter) == 0
	{
		"nothing"
	}
	elseif ARRAYSIZE(surfacesfilter) > 3
	{
		"a lot"
	}
	else
	{
		"'%(surfacesfilter)'"
	}
	--
	")\f[italic,false]\n/\![*]\q[Intervals name filter,displayIntervalsFilter] \n        \f[italic,true](currently "
	--
	if ARRAYSIZE(intervalsfilter) == 0
	{
		"nothing"
	}
	elseif ARRAYSIZE(intervalsfilter) > 3
	{
		"a lot"
	}
	else
	{
		"'%(intervalsfilter)'"
	}
	--
	"\n\n[half]\!{*]\q[Go back,scanShellMenu]"
}

Select.displaySurfacesWithName
{
	if surfaceswithname == 1
	{
		surfaceswithname = 0
	}
	else
	{
		surfaceswithname = 1
	}
}

Select.displayIntervalsWithName
{
	if intervalswithname == 1
	{
		intervalswithname = 0
	}
	else
	{
		intervalswithname = 1
	}
}

Select.displaySurfacesFilter
{
	"\0\b2\_q%(lsta)Here is the filter list :\n\n[half]"
	--
	_res = ""
	foreach surfacesfilter ; _filter
	{
		_res = _res + " - %(_filter)"+"\n"
	}
	"%(_res)"
	--
	"\n[half]\![*]\q[Add one,addsurfacesfilter]     \![*]\q[Remove one,removesurfacesfilter]\n\![*]\q[Go Back,editShellFilters]"
	
}

Select.addsurfacesfilter
{
	"\0%(lsta)What filter do you wnat ?\![open,inputbox,OnSurfacesFilter,-1]"
}

Select.removesurfacesfilter
{
	"\0\b2\_q%(lsta)Which one do you want to remove ?\_q\n\n[half]"
	--
	filtersuppr = 1
	_res = ""
	foreach surfacesfilter ; _filter
	{
		_res = _res + "\_a[surfacesfilter%(_filter)]\_q\![*]%(_filter)\_a"+"\_q\n"
	}
	"%(_res)"
	--
	"\n[half]\![*]\q[Go Back,editShellFilters]"
}

OnSurfacesFilter
{
	surfacesfilter ,= reference0
	Select.displaySurfacesFilter
}

Select.displayIntervalsFilter
{
	"\0\_q\b2%(lsta)Here is the filter list :\n\n[half]"
	--
	_res = ""
	foreach intervalsfilter ; _filter
	{
		_res = _res + " - %(_filter)"+"\n"
	}
	"%(_res)"
	--
	"\![*]\q[Add one,addintervalsfilter]     \![*]\q[Remove one,removeintervalsfilter]\n\![*]\q[Go Back,editShellFilters]"
}

Select.addintervalsfilter
{
	"\0%(lsta)What filter do you wnat ?\![open,inputbox,OnIntervalsFilter,-1,%(intervalsfilter)]"
}

Select.removeintervalsfilter
{
	"\0\b2\_q%(lsta)Which one do you want to remove ?\_q\n\n[half]"
	--
	filtersuppr = 1
	_res = ""
	foreach intervalsfilter ; _filter
	{
		_res = _res + "\_a[intervalsfilter%(_filter)]\_q\![*]%(_filter)\_a"+"\_q\n"
	}
	"%(_res)"
	--
	"\n[]\![*]\q[Go Back,editShellFilters]"
}

Select.applycreatedpose
{
	"\0\b2%(posecreated)%(IntervalDescription)"
}

Select.applycreatingposefrommenu
{
	"\0%(posecreated)%(IntervalsList)"
}

Select.getsurfaceinformation
{
	reference0 = "surfaceinfo%(surfacetargeted[0])"
	OnAnchorSelect
}

OnIntervalsFilter
{
	intervalsfilter ,= reference0
	Select.displayIntervalsFilter
	
}

ParseShell
{
	_file = "..\..\shell"+_argv[0]+"\surfaces.txt"//../../../shell/" + _argv[0] + "/surfaces.txt"
	//_file = "C:\Users\lisou\Documents\Ukagakas\ssp_2_4_19f\ghost\hunter_smoker\shell\UnInf\surfaces.txt"
	_i = FOPEN(_file,"r")
	
	intervalslist = IARRAY
	surfaceslist = IARRAY
	_pos = ""
	_lastsurface = ""
	_lastcomment = ""
	_lastsurfacecategory = ""
	_lastcategory = ""
	_line = FREAD(_file)
	while _line != -1
	{
		
		while (SUBSTR(_line,0,1)) == " " || (SUBSTR(_line,0,1)) == "	"
		{
			_line = SUBSTR(_line,1,STRLEN(_line)-1)
		}
		//_withoutspace = REPLACE(REPLACE(_line,"	","")," ","")
		
		if SUBSTR(_line,0,2) == "//" && SUBSTR(_line,0,3) != "///" && ARRAYSIZE(SPLIT(_line," ")) < 10
		{
			if _lastcomment != ""
			{
				_lastcategory = _lastcomment
			}
			_lastcomment = REPLACE(REPLACE(SUBSTR(_line,2,STRLEN(_line)-1),"\","\\"),",","")
		}
		elseif SUBSTR(_line,0,3) == "///" && ARRAYSIZE(SPLIT(_line," ")) < 10
		{
			//_lastcategory = SUBSTR(_line,3,STRLEN(_line)-1)
			if _lastcomment != ""
			{
				_lastcategory = _lastcomment
			}
			_lastcomment = REPLACE(REPLACE(SUBSTR(_line,3,STRLEN(_line)-1),"\","\\"),",","")
		}
		elseif "interval" _in_ _line
		{
			_temp = SPLIT(_line,"interval,")
			if ARRAYSIZE(_pos) == 2
			{
				for _i = TOINT(_pos[0]); _i <= TOINT(_pos[1]);_i++
				{
					intervalslist ,= "%(_temp[0]),%(_lastcomment),%(_i),%(_lastcategory),%(_temp[1])"
				}
			}
			else
			{
				intervalslist ,= "%(_temp[0]),%(_lastcomment),%(_lastsurface),%(_lastcategory),%(_temp[1])"
			}
			_lastcomment = ""
			
		}
		elseif STRSTR(_line,"surface",0) == 0 && "element" !_in_ _line && "append" !_in_ _line && "alias" !_in_ _line
		{
			if _lastcategory != ""
			{
				_lastsurfacecategory = _lastcategory
			}
			_temp = SPLIT(_line,"surface")
			_index = ARRAYSIZE(_intervalslist)
			surfaceslist ,= "%(_temp[1]),%(_lastcomment),%(_lastcategory),%(_index)"
			_lastsurface = _temp[1]
			_lastcomment = ""
			_lastcategory = ""
		}
		elseif STRSTR(_line,"surface.append",0) == 0
		{
			_line = REPLACE(_line,"surface.append","")
			_pos = SPLIT(_line,"-")
		}
		elseif _line == ""
		{}
		if "}" _in_ _line
		{
			 _lastcategory = _lastsurfacecategory
			_pos = ""
		}
		_line = FREAD(_file)
	}
	_res = "\b2"
	foreach _intervalslist ; _interval
	{
		_res += "%(_interval)\n"
	}
	//"%(_res)"
	_i = FCLOSE(_file)
}