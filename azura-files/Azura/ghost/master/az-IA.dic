

// Organization of sentencesdata : (negation,phrasetype,tense,detsubject,adjsubject,subject,firstprep,detCOD,adjCOD,COD,,secondprep,adjCOI,COI,others)
//For non french people, COD means object's direct complement, it's the answer of what like the mouse ? the mouse likes cheese. Here the COD is cheese.
//Responses to do : HowAvis, HowThink, WhatHave, When, Where, Which

Select.saysthg
{
	"\![leave,passivemode]* What do you want to say to me ?\![open,inputbox,OnRespondInput,-1]\e"
}

OnRespondInput
{
	adjtaught = 0
	
	_sentence = reference0
	AnalyzingLoop(_sentence)
	//"%(_result)"
	--
	//Code qui marche
	//_sentence = reference0
	//AzRespond(UnderstandSentencesV2(_sentence))
	//UnderstandSentences(_sentence)
}

AnalyzingLoop
{
	nb = 0
	if hastaught != 1
	{
		sayed = REPLACE(TOLOWER(reference0),", "," ")
		
	}
	else
	{
		hastaught = 0
	}
	_usersaying = ""
	_usersayed = SPLIT(sayed,"?")
	foreach _usersayed ; _things
	{
		_usersaying ,= SPLIT(_things,".")
	}
	_usersayed = _usersaying
	_usersaying = ""
	foreach _usersayed ; _things
	{
		_usersaying ,= SPLIT(_things,"!")
	}
	_sentencesdata = IARRAY
	//sentencesdata = "negation,phrasetype,tense,modal,verb,detsubject,adjsubject,subject,firstprep,detCOD,adjCOD,COD,secondprep,detCOI,adjCOI,COI,others"
	_tempsayed = IARRAY
	foreach _usersaying ; _sentence
	{
		if _sentence != ""
		{
			_tempsayed = SPLIT(_sentence," ")
			_result = UnderstandSentencesV2(_tempsayed)
			if "I don't understand" _in_ _result
			{
				"%(_result)"
				return
			}
			_sentencesdata ,= SPLIT(_result,"|")
		}
		
	}

	AzRespond(_sentencesdata)
}

UnderstandSentencesV2
{
	_sentence = _argv
	_newsentence = IARRAY
	_modal = 0
	_negation = 0
	_phrasetype = 0
	_tense = 0
	_verb = 0
	_phrasal = 0
	_detsubject = 0
	_adjsubject = 0
	_subject = "0"
	_firstprep = 0
	_allCO = IARRAY
	_detCOD = 0
	_adjCOD = 0
	_COD = "0"
	_GN = 0
	_detprevGN = 0
	_prepprevGN = 0
	_adjprevGN = 0
	_prevGN = "0"
	_complement = 0
	_prevj = 0
	_j = 0
	nb++
	if _sentence[_j] == ""
	{
		_j = _j + 1
	}
	
	while DetermineWord(_sentence[_j])[0] == "complement"
	{
		_complement += " %(_sentence[_j])"
		_j++
	}
	
	if _sentence[_j] == "what" || _sentence[_j] == " what"
	{
		_phrasetype = "whatquestion"
		_j++
	}
	elseif _sentence[_j] == "which" || _sentence[_j] == " which"
	{
		_phrasetype = "whichquestion"
		_j++
	}
	elseif _sentence[_j] == "how" || _sentence[_j] == " how"
	{
		_phrasetype = "howquestion"
		_j++
	}
	elseif _sentence[_j] == "where" || _sentence[_j] == " where"
	{
		_phrasetype = "wherequestion"
		_j++
	}
	elseif _sentence[_j] == "when" || _sentence[_j] == " when"
	{
		_phrasetype = "whenquestion"
		_j++
	}
	elseif ASEARCH(_sentence[_j],"do","don't","does","doesn't","will","would","won't","shall","shouldn't","should","can","cannot") != -1
	{
		_phrasetype = "normalquestion"
		_tense = "present"
		//modal = tempsayed[0]
	}
	elseif ASEARCH(_sentence[_j],"did","didn't","could","couldn't") != -1
	{
		_phrasetype = "normalquestion"
		_tense = "past"
	}
	elseif _tempsayed[_j] == "is" || _tempsayed[_j] == "isn't" || _tempsayed[_j] == "has" || _tempsayed[_j] == "hasn't" || _tempsayed[_j] == "are" || _tempsayed[_j] == "aren't" || _tempsayed[_j] == "haven't" || _tempsayed[_j] == "have"
	{
		_phrasetype = "modalquestion"
		_tense = "present"
	}
	elseif ASEARCH(_sentence[_j],"was","wasn't","were","weren't","had","hadn't") != -1
	{
		_phrasetype = "modalquestion"
		_tense = "past"
	}
	else
	{
		_phrasetype = "affirmation"
		
	}
	
	if "question" _in_ _phrasetype
	{
		
		_type = DetermineWord(_sentence[_j])[0]
		while DetermineWord(_sentence[_j])[0] == "complement"
		{
			_complement += " %(_sentence[_j])"
			_j++
		}
		//If there is immediately a nominal group
		if ("verb" !_in_ _type || "ing" _in_ DetectTense(_sentence[_j])) && _sentence[_j] != "" && _type != "complement"
		{
			_GN = ReturnGN(_j,_sentence)
			if "I don't understand" _in_ _GN
			{
				"%(_GN)"
				return
			}
			_j = TOINT(_GN[0])
			if _GN[1] != "0"
			{
				_prepCOD = _GN[1]
				_detCOD = _GN[2]
				_adjCOD = _GN[3]
				_COD = _GN[4]
				_allCO ,= _prepCOD+","+_detCOD+","+_adjCOD+","+_COD
			}
			else
			{
				_prepprevGN = _GN[1]
				_detprevGN = _GN[2]
				_adjprevGN = _GN[3]
				_prevGN = _GN[4]
			}
		}
		while DetermineWord(_sentence[_j])[0] == "complement"
		{
			_complement += " %(_sentence[_j])"
			_j++
		}
		//While there is a nominal group before the verb
		_type = DetermineWord(_sentence[_j])[0]
		while "verb" !_in_ _type && _j < ARRAYSIZE(_sentence) && _sentence[_j] != ""
		{
			_GN = ReturnGN(_j,_sentence)
			if "I don't understand" _in_ _GN
			{
				"%(_GN)"
				return
			}
			_j = TOINT(_GN[0])
			_prepCOD = _GN[1]
			_detCOD = _GN[2]
			_adjCOD = _GN[3]
			_COD = _GN[4]
			_allCO ,= _prepCOD+","+_detCOD+","+_adjCOD+","+_COD
			_type = DetermineWord(_sentence[_j])[0]
			while _type == "complement"
			{
				_complement += " %(_sentence[_j])"
				_j++
				_type = DetermineWord(_sentence[_j])[0]
			}
		}
		//If the next word isn't a ver, it prints an error message
		if "verb" !_in_ _type
		{
			PrintError
		}
		else
		{
			//Checking if the verb is a modal
			if IsModal(_sentence[_j]) != "0"
			{
				if "n't" _in_ _sentence[_j]
				{
					_negation = 1
				}
				_modal = _sentence[_j]
				_j++
				_type = DetermineWord(_sentence[_j])[0]
				while _type == "complement"
				{
					_complement += " %(_sentence[_j])"
					_j++
					_type = DetermineWord(_sentence[_j])[0]
				}
				if "verb" !_in_ type && _sentence[_j] != ""
				{
					_GN = ReturnGN(_j,_sentence)
					if "I don't understand" _in_ _GN
					{
						"%(_GN)"
						return
					}
					_j = TOINT(_GN[0])
					_prepnewGN = _GN[1]
					_detnewGN = _GN[2]
					_adjnewGN = _GN[3]
					_newGN = _GN[4]
					_type = DetermineWord(_sentence[_j])[0]
					while _type == "complement"
					{
						_complement += " %(_sentence[_j])"
						_j++
						_type = DetermineWord(_sentence[_j])[0]
					}
					if "verb" _in_ _type
					{
						_verb = _sentence[_j]
						_subject = _newGN
						_detsubject = _detnewGN
						_adjsubject = _adjnewGN
						if _prevGN != 0 && _prevGN != "0"
						{
							_allCO ,= _prepprevGN +","+_detprevGN +","+_adjprevGN +","+_prevGN
						}
						
					}
					else
					{
						if ReturnGN(_j,_sentence) == DetectNextVerb(_j,_sentence)
						{
							_verb = _sentence[TOINT(DetectNextVerb(_j,_sentence))]
							_subject = _prevGN
							_detsubject = _detprevGN
							_adjsubject = _adjprevGN
							_allCO ,= _prepnewGN +","+_detnewGN +","+_adjnewGN +","+_newGN
						}
						else
						{
							_verb = _modal
							_subject = _newGN
							_detsubject = _detnewGN
							_adjsubject = _adjnewGN
							if _prevGN != "0"
							{
								_allCO ,= _prepprevGN +","+_detprevGN +","+_adjprevGN +","+_prevGN
							}
						}
					}
				
					
				}
				else
				{
					if "ing" _in_ DetectTense(_sentence[_j])
					{
						_GN = ReturnGN(_j,_sentence)
						_j = TOINT(_GN[0])
						_prepnewGN = _GN[1]
						_detnewGN = _GN[2]
						_adjnewGN = _GN[3]
						_newGN = _GN[4]
						_type = DetermineWord(_sentence[_j])[0]
						if "verb" _in_ _type
						{
							_verb = _sentence[_j]
							_subject = _newGN
							_detsubject = _detnewGN
							_adjsubject = _adjnewGN
							if _prevGN != "0"
							{
								_allCO ,= _prepprevGN +","+_detprevGN +","+_adjprevGN +","+_prevGN
							}	
						}
						else
						{
							if ReturnGN(_j,_sentence) == DetectNextVerb(_j,_sentence)
							{
								_verb = _sentence[TOINT(DetectNextVerb(_j,_sentence))]
								_subject = _prevGN
								_detsubject = _detprevGN
								_adjsubject = _adjprevGN
								_allCO ,= _prepnewGN +","+_detnewGN +","+_adjnewGN +","+_newGN
							}
							else
							{
								_verb = _modal
								_subject = _newGN
								_detsubject = _detnewGN
								_adjsubject = _adjnewGN
								if _prevGN != "0"
								{
									_allCO ,= _prepprevGN +","+_detprevGN +","+_adjprevGN +","+_prevGN
								}
							}
						}
					}
					else
					{
						while IsModal(_sentence[_j]) != "0" && "ing" !_in_ DetectTense(_sentence[_j])
						{
							_j++
						}
						_type = DetermineWord(_sentence[_j])
						if "verb" _in_ _type
						{
							_verb = _sentence[_j]
							_subject = _prevGN
							_detsubject = _detprevGN
							_adjsubject = _adjprevGN
						}
						else
						{
							_GN = ReturnGN(_j,_sentence)
							_j = TOINT(_GN[0])
							_prepnewGN = _GN[1]
							_detnewGN = _GN[2]
							_adjnewGN = _GN[3]
							_newGN = _GN[4]
							_type = DetermineWord(_sentence[_j])[0]
							if "verb" _in_ _type
							{
								_verb = _sentence[_j]
								_subject = _newGN
								_detsubject = _detnewGN
								_adjsubject = _adjnewGN
								if _prevGN != "0"
								{
									_allCO ,= _prepprevGN +","+_detprevGN +","+_adjprevGN +","+_prevGN
								}
							
							}
							else
							{
								if ReturnGN(_j,_sentence) == DetectNextVerb(_j,_sentence)
								{
									_verb = _sentence[TOINT(DetectNextVerb(_j,sentence))]
									_subject = _prevGN
									_detsubject = _detprevGN
									_adjsubject = _adjprevGN
									_allCO ,= _prepnewGN +","+_detnewGN +","+_adjnewGN +","+_newGN
								}
								else
								{
									_verb = _modal
									_subject = _newGN
									_detsubject = _detnewGN
									_adjsubject = _adjnewGN
									if _prevGN != "0"
									{
										_allCO ,= _prepprevGN +","+_detprevGN +","+_adjprevGN +","+_prevGN
									}		
								}
							}
						}
					}
				}
			}
			else
			{
				_verb = _sentence[_j]
				_detsubject = _detprevGN
				_adjsubject = _adjprevGN
				_subject = _prevGN
			}
			
			
		}
	}
	else
	{
		
		_type = DetermineWord(_sentence[_j])[0]
		while _type == "complement"
		{
			_complement += " %(_sentence[_j])"
			_j++
			_type = DetermineWord(_sentence[_j])[0]
		}
		while _type == "preposition"
		{
			_GN = ReturnGN(_j,_sentence)
			if "I don't understand" _in_ _GN
			{
				"%(_GN)"
				return
			}
			_j = TOINT(_GN[0])
			_prepCOD = _GN[1]
			_detCOD = _GN[2]
			_adjCOD = _GN[3]
			_COD = _GN[4]
			_allCO ,= _prepCOD+","+_detCOD+","+_adjCOD+","+_COD
			_type = DetermineWord(_sentence[_j])[0]
			while _type == "complement"
			{
				_complement += " %(_sentence[_j])"
				_j++
				_type = DetermineWord(_sentence[_j])[0]
			}
		}
		_GN = ReturnGN(_j,_sentence)

		if "I don't understand" _in_ _GN
		{
			"%(_GN)"
			return
		}
		_j = TOINT(_GN[0])
		_detsubject = _GN[2]
		_adjsubject = _GN[3]
		_subject = _GN[4]
		_type = DetermineWord(_sentence[_j])[0]
		while _type == "complement"
		{
			_complement += " %(_sentence[_j])"
			_j++
			_type = DetermineWord(_sentence[_j])[0]
		}
		while "verb" !_in_ _type && _j < ARRAYSIZE(_sentence) && _sentence[_j] != ""
		{
			_GN = ReturnGN(_j,_sentence)
			if "I don't understand" _in_ _GN
			{
				"%(_GN)"
				return
			}
			_j = TOINT(_GN[0])
			_prepCOD = _GN[1]
			_detCOD = _GN[2]
			_adjCOD = _GN[3]
			_COD = _GN[4]
			_allCO ,= _prepCOD+","+_detCOD+","+_adjCOD+","+_COD
			_type = DetermineWord(_sentence[_j])[0]
			while _type == "complement"
			{
				_complement += " %(_sentence[_j])"
				_j++
				_type = DetermineWord(_sentence[_j])[0]
			}
		}
		_type = DetermineWord(_sentence[_j])[0]
		if "verb" !_in_ _type && "%(_sentence[_j])" != ""
		{
			PrintError
		}
		else
		{
			if IsModal(_sentence[_j]) != "0"
			{
				if "n't" _in_ _sentence[_j]
				{
					_negation = 1
				}
				_modal = _sentence[_j]
				if "verb" !_in_ DetermineWord(_sentence[_j+1])
				{
					_verb = _modal
				}
				else
				{
					_j= _j + 1
					_verb = _sentence[_j]
				}
			}
			else
			{
				_verb = _sentence[_j]

			}
		}
		
	}
	
	
	//Beside the verb place, all sentences end with the same structure
	_j++
	_type = DetermineWord(_sentence[_j])[0]
	_GN = "0"
	
	while _type == "complement"
	{
		_complement += " %(_sentence[_j])"
		_j++
		_type = DetermineWord(_sentence[_j])[0]
	}
	if ("verb" !_in_ _type && _sentence[_j] != "") || ("verb" _in_ _type && "ing" _in_ DetectTense(_sentence[_j])) || ("verb" _in_ _type && _prevj==0)
	{
		_prevj = _j
		_GN = ReturnGN(_j,_sentence)
		if "I don't understand" _in_ _GN
		{
			"%(_GN)"
			return
		}
		_j = TOINT(_GN[0])
		_prepprevGN = _GN[1]
		_detprevGN = _GN[2]
		_adjprevGN = _GN[3]
		_prevGN = _GN[4]
		_type = DetermineWord(_sentence[_j])[0]
	}
	while _type == "complement"
	{
		_complement += " %(_sentence[_j])"
		_j++
		_type = DetermineWord(_sentence[_j])[0]
	}

	while ("verb" !_in_ _type && _j < ARRAYSIZE(_sentence) && _sentence[_j] != "") || ("verb" _in_ _type && "ing" _in_ DetectTense(_sentence[_j])) || ("verb" _in_ _type && _prevj==0)
	{
		_prepCOD = _prepprevGN
		_detCOD = _detprevGN
		_adjCOD = _adjprevGN
		_COD = _prevGN
		_prevj = _j
		_GN = ReturnGN(_j,_sentence)
		if "I don't understand" _in_ _GN
		{
			"%(_GN)"
			return
		}
		_j = TOINT(_GN[0])
		_prepprevGN = _GN[1]
		_detprevGN = _GN[2]
		_adjprevGN = _GN[3]
		_prevGN = _GN[4]
		_allCO ,= _prepCOD+","+_detCOD+","+_adjCOD+","+_COD
		_type = DetermineWord(_sentence[_j])[0]
		while _type == "complement"
		{
			_complement += " %(_sentence[_j])"
			_j++
			_type = DetermineWord(_sentence[_j])[0]
		}
	}
	if _GN != "0" && _GN != 0
	{
		
		_allCO ,= _prepprevGN + "," + _detprevGN + "," + _adjprevGN + "," + _prevGN
	}
	if "verb" _in_ _type && _j < ARRAYSIZE(_sentence) && _sentence[_j] != ""
	{
		if "preposition" _in_ DetermineWord(_sentence[_prevj])
		{
			_complement += " %(_sentence[_prevj])"
			_prevj++
		}
		_tempsentence = IARRAY
		for _i=0; _i+_prevj <ARRAYSIZE(_sentence); _i++
		{
			_tempsentence[_i] = _sentence[_i+_prevj]
			
		}
		
		_newsentence = UnderstandSentencesV2(_tempsentence)
	}
	
	_finalsentence = "%(_negation),%(_phrasetype),%(_tense),%(_modal),%(_verb),%(_detsubject),%(_adjsubject),%(_subject),%(_complement),%(_allCO)"
	
	if STRLEN(_newsentence) > 5
	{
		_finalsentence += "|" + "%(_newsentence)"
	}
	"%(_finalsentence)"
}

UnderstandSentences
{
	if adjtaught != 1
	{
		sayed = REPLACE(TOLOWER(reference0),", "," ")
		
	}
	else
	{
		adjtaught = 0
	}
	_usersaying = ""
	_usersayed = SPLIT(sayed,"?")
	foreach _usersayed ; _things
	{
		_usersaying ,= SPLIT(_things,".")
	}
	_usersayed = _usersaying
	_usersaying = ""
	foreach _usersayed ; _things
	{
		_usersaying ,= SPLIT(_things,"!")
	}
	_sentencesdata = IARRAY
	//sentencesdata = "negation,phrasetype,tense,modal,verb,detsubject,adjsubject,subject,firstprep,detCOD,adjCOD,COD,secondprep,detCOI,adjCOI,COI,others"
	_tempsayed = IARRAY
	_i = 2
	foreach _usersaying ; _sentence
	{
		_tempsayed = SPLIT(_usersaying[_i]," ")
		//truc += tempsayed
		_modal = 0
		_negation = 0
		_phrasetype = 0
		_tense = 0
		_verb = 0
		_phrasal = 0
		_detsubject = 0
		_adjsubject = 0
		_subject = 0
		_firstprep = 0
		_detCOD = 0
		_adjCOD = 0
		_COD = 0
		_secondprep = 0
		_detCOI = 0
		_adjCOI = 0
		_COI = 0
		_otherwords = 0
		_complement = 0
		_j = 0
		--
		
		if " not " _in_ _usersaying[_i] || "don't" _in_ _usersaying[_i] || " no " _in_ _usersaying[_i] || "n't" _in_ _usersaying[_i] || "cannot" _in_ _usersaying[_i]
		{
			_negation = 1
		}
		--
		if _tempsayed[_j] == ""
		{
			_j = _j + 1
		}
		
		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(_tempsayed[_j])"
			_j++
		}
		--
		if _tempsayed[_j] == "what" || _tempsayed[_j] == " what"
		{
			_phrasetype = "whatquestion"
		}
		elseif _tempsayed[_j] == "which" || _tempsayed[_j] == " which"
		{
			_phrasetype = "whichquestion"
		}
		elseif _tempsayed[_j] == "how" || _tempsayed[_j] == " how"
		{
			_phrasetype = "howquestion"
		}
		elseif _tempsayed[_j] == "where" || _tempsayed[_j] == " where"
		{
			_phrasetype = "wherequestion"
		}
		elseif _tempsayed[_j] == "when" || _tempsayed[_j] == " when"
		{
			_phrasetype = "whenquestion"
		
		}
		elseif _tempsayed[_j] == "do" || _tempsayed[_j] == "don't" || _tempsayed[_j] == "does" || _tempsayed[_j] == "doesn't" || "%(_tempsayed[_j])" _in_ "will would won't shall shouldn't can cannot" && "%(_tempsayed[_j])" != "i"
		{
			_phrasetype = "normalquestion"
			_tense = "present"
			//modal = tempsayed[0]
		}
		elseif _tempsayed[_j] == "did" || _tempsayed[_j] == "didn't" || "%(_tempsayed[_j])" _in_  "should shouldn't could couldn't"
		{
			_phrasetype = "normalquestion"
			_tense = "past"
		}
		elseif _tempsayed[_j] == "is" || _tempsayed[_j] == "isn't" || _tempsayed[_j] == "has" || _tempsayed[_j] == "hasn't" || _tempsayed[_j] == "are" || _tempsayed[_j] == "aren't" || _tempsayed[_j] == "haven't" || _tempsayed[_j] == "have"
		{
			_phrasetype = "modalquestion"
			_tense = "present"
		}
		elseif _tempsayed[_j] _in_ "was wasn't were weren't had hadn't"
		{
			_phrasetype = "modalquestion"
			_tense = "past"
		}
		else
		{
			_phrasetype = "affirmation"
			
		}
		--
		if "question" _in_ _phrasetype
		{
			if _phrasetype == "whichquestion"
			{
				_j = _j + 1
				if "determinant" _in_ DetermineWord(_tempsayed[_j])[0]
				{
					_detCOD = "%(_tempsayed[_j])"
					_j = _j + 1
					while "adjectif" _in_ DetermineWord(_tempsayed[_j])[0]
					{
						_adjCOD ,= "%(_tempsayed[_j])"
						_j = _j + 1
					}
					_COD = "%(_tempsayed[_j])"
					_j = _j + 1
				}
			}
			elseif _phrasetype != "normalquestion" && _phrasetype != "modalquestion"
			{
				_j = _j + 1
			}
			_modal = "%(_tempsayed[_j])"
			--
			//"The question is an %(phrasetype) one."
			--
			
			_j = _j + 1
			
		}
		
		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(tempsayed[_j])"
			_j++
		}
		
		//Starting with the subject
		if DetermineWord(_tempsayed[_j])[0] == "determinant"
		{
			_detsubject = "%(_tempsayed[_j])"
			_j = _j + 1
			while "adjectif" _in_ DetermineWord(_tempsayed[_j])[0]
			{				
				_adjsubject = _adjsubject +" %(_tempsayed[_j])"
				_j = _j + 1
			}
		}

		_subject = "%(_tempsayed[_j])"
		_j = _j + 1

		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(_tempsayed[_j])"
			_j++
		}
		
		//Checking the modal verb

		if STRSTR("%(_tempsayed[_j])","ing",0) != (STRLEN("%(_tempsayed[_j])")-3) && _modal _in_ "is are was were had has have isn't aren't" && "question" _in_ _phrasetype
		{
			_verb = _modal
		}
		elseif "%(_tempsayed[_j])" _in_ "is are was were had has have isn't hadn't haven't aren't" && "%(_tempsayed[_j])" != "i"
		{
			if STRSTR("%(_tempsayed[_j+1])","ing",0) == (STRLEN("%(_tempsayed[_j+1])")-3)
			{
				_modal = "%(_tempsayed[_j])"
				_verb = "%(_tempsayed[_j+1])"
				_j = _j + 2
			}
			elseif STRSTR("%(_tempsayed[_j+2])","ing",0) == (STRLEN("%(_tempsayed[_j+2])")-3)
			{
				_modal = "%(_tempsayed[_j])"
				_verb = "%(_tempsayed[_j+2])"
				_j = _j + 3
			}
			else
			{
				_modal = ""
				_verb = "%(_tempsayed[_j])"
				_j = _j + 1
			}
		}
		elseif "%(_tempsayed[_j])" _in_ "will would wouldn't doesn't don't didn't won't should shall shouldn't can could cannot couldn't"
		{
			_modal = "%(_tempsayed[_j])"
			_verb = "%(_tempsayed[_j+1])"
			_j = _j +2
		}
		else
		{
			_modal = ""
			_verb = "%(_tempsayed[_j])"
			_j = _j + 1
		}
		if _verb == ""
		{
			_verb = _modal
		}
		
		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(_tempsayed[_j])"
			_j++
		}
		--
		if ASEARCH(_tempsayed[_j],"out","up","down","off") != -1 && _phrasetype != "whichquestion"
		{
			_phrasal ="%(_tempsayed[_j])"
			_j = _j + 1
		}
		
		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(_tempsayed[_j])"
			_j++
		}
		
		if DetermineWord(_tempsayed[_j])[0] == "preposition" && _phrasetype != "whichquestion"
		{
			_firstprep ="%(_tempsayed[_j])"
			_j = _j + 1
		}
		--
		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(_tempsayed[_j])"
			_j++
		}
		
		if DetermineWord(_tempsayed[_j])[0] == "determinant" && _phrasetype != "whichquestion"
		{
			_detCOD = "%(_tempsayed[_j])"
			_j = _j + 1
		}
		--
		while DetermineWord(_tempsayed[_j])[0] == "adjectif" && _phrasetype != "whichquestion"
		{
			_adjCOD = _adjCOD + " %(_tempsayed[_j])"
			_j = _j + 1
		}
		--
		if _phrasetype != "whichquestion"
		{
			
			if DetermineWord(_tempsayed[_j])[0] == "preposition" || "%(_tempsayed[_j])" == ""
			{
				_COD = "noCOD"
				
				_j = _j + 1
			}
			else
			{
				if DetermineWord( "%(_tempsayed[_j+1])")[0] == "name"
				{
					_adjCOD += " %(_tempsayed[_j])"
					_COD = "%(_tempsayed[_j+1])"
					_j += 1
				}
				else
				{
					_COD = "%(_tempsayed[_j])"
				}
				_j = _j + 1
			}
			
		
		}
		
		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(_tempsayed[_j])"
			_j++
		}
		
		--
		if ASEARCH(_tempsayed[_j],"out","up","down","off") != -1 && _phrasetype != "whichquestion"
		{
			_phrasal ="%(tempsayed[_j])"
			_j = _j + 1
		}
		--
		
		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(_tempsayed[_j])"
			_j++
		}
		
		
		_index = TOINT(DetermineWord(_verb)[1])
		if DetermineWord(_tempsayed[_j])[0] == "preposition" && "%(verbslib[_index][0])" != "think"
		{
			_secondprep ="%(_tempsayed[_j])"
			_j = _j + 1
		}
		--
		
		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(_tempsayed[_j])"
			_j++
		}
		
		
		if DetermineWord(_tempsayed[_j])[0] == "determinant"
		{
			_detCOI = "%(_tempsayed[_j])"
			_j = _j + 1
		}
		--
		while "adjectif" _in_ DetermineWord(_tempsayed[_j])[0]
		{
			_adjCOI = _adjCOI + " %(_tempsayed[_j])"
			_j = _j + 1
		}
		--
		if DetermineWord(_tempsayed[_j])[0] == "preposition" || "%(_tempsayed[_j])" == ""
		{
			_COI = "noCOI"
			
			_j = _j + 1
		}
		else
		{ 
			if DetermineWord("%(_tempsayed[_j+1])")[0] == "name" && DetermineWord("%(_tempsayed[_j])")[0] != "verb"
			{
				_adjCOI += " %(_tempsayed[_j])"
				_COI = "%(_tempsayed[_j+1])"
				_j += 1
			}
			else
			{
				_COI = "%(_tempsayed[_j])"
			}
			_j = _j + 1
		}
		
		while DetermineWord(_tempsayed[_j])[0] == "complement"
		{
			_complement += " %(_tempsayed[_j])"
			_j++
		}
		
		
		--
		while _j < ARRAYSIZE(_tempsayed)
		{
			_otherwords = _otherwords + " " + _tempsayed[_j]
			_j = _j + 1
		}
		
		_i = _i + 1
		--
		if _i <= ARRAYSIZE(_usersaying)-1
		{
			_sentencesdata ,= _negation+","+_phrasetype+","+_tense+","+_modal+","+_verb+","+_detsubject+","+_adjsubject+","+_subject+","+ _complement + ","+_firstprep+","+_detCOD+","+_adjCOD+","+_COD+","+_secondprep+","+_detCOI+","+_adjCOI+","+_COI+","+_otherwords + ","
			
		}
	}
	//topghost = SPLIT(usersaying[3]," ")
	SAVEVAR
	--
	AzRespond(_sentencesdata)
}

/*Code pour augmenter l'affection :
wordsearched = "%(COD[0])"
										_index = DetermineWord[1]
										COD[5] = TOINT("%(COD[5])") + 1
										nameslib[_index] = COD*/

PrintError
{
	"\0%(lsta)Something went wrong in the analyse of the sentence.%(lsto)\e"
}

AzRespond
{
	
	_sentencesdata = _argv
	_unknownwords = IARRAY
	_unknownverb = IARRAY
	_respond = "* "
	_prevnegation = "0"
	_prevphrasetype = "0"
	_prevtense = "0"
	_prevmodal = "0"
	_prevverb = "0"
	_prevdetsubject = "0"
	_prevadjsubject = "0"
	_prevsubject = "0"
	_prevfirstprep = "0"
	_prevdetCOD = "0"
	_prevadjCOD = "0"
	_prevCOD = "0"
	_prevsecondprep = "0"
	_prevdetCOI = "0"
	_prevadjCOI = "0"
	_prevCOI = "0"
	_prevotherwords = "0"
	_prevcomplement = "0"
	//_sentencesdata
	--
	foreach _sentencesdata ; _sentence
	{
		_negation = _sentence[0]
		_phrasetype = _sentence[1]
		_tense = _sentence[2]
		_modal = _sentence[3]
		_verb = _sentence[4]
		
		_detsubject = _sentence[5]
		_adjsubject = IARRAY
		_adjsubject = REPLACE(SPLIT(_sentence[6])," ",";")
		_adjectives = SPLIT(_adjsubject," ")
		
		foreach _adjectives ; _adj
		{
			_result = DetermineWord(_adj)
			_type = SPLIT(_result[0]," ")
			_index = _result[1]
			_indadj  = ASEARCH("adjectif",_type)
			_indname = ASEARCH("name",_type)
			if _indadj != -1
			{
				_adjsubject = REPLACE(_adjsubject,";"+_adj,";"+adjectiveslib[TOINT(_index[_indadj])])
			}
			elseif _indname != -1
			{
				_adjsubject += REPLACE(_adjsubject,";"+_adj,";"+nameslib[TOINT(_index[_indname])])
			}
			
		}
		_subject = _sentence[7]
		_result = DetermineWord(_subject)
		_type = SPLIT(_result[0]," ")
		_index = SPLIT(_result[1]," ")
		_indverb  = ASEARCH("verb",_type)
		_indname = ASEARCH("name",_type)
		_indadj = ASEARCH("adjectif",_type)
		if _indname != -1
		{
			_subject = nameslib[TOINT(_index[_indname])]
			foreach _adjsubject ; _adj
			{
				_word = DetermineWord(_adj[0]+_subject[0])
				if _word[0] != "0"
				{
					_subject = _word
				}
			}
			
		}
		elseif _indverb != -1
		{
			_subject = verbslib[TOINT(_index[_indverb])]
		}
		elseif _indadj != -1
		{
			_subject = adjectiveslib[TOINT(_index[_indadj])]
		}
		_complement = SPLIT(_sentence[8]," ")
		_allCO = IARRAY
		_CO = ""
		_i = 9
		_j = 0
		while _i < ARRAYSIZE(_sentence) && _sentence[_i] != ""
		{
			if _j == 0
			{
				_CO += _sentence[_i]
				_j++
			}
			elseif _j < 3
			{
				_CO += "," + _sentence[_i]
				_j++
			}
			elseif _j == 3
			{
				_CO += "," + _sentence[_i]
				_allCO ,= _CO
				_CO = ""
				_j = 0
			}
			_i++
		}
		
		_i = 9
		_foundCOD = 0
		_foundCOI = 0
		_detCOD = "0"
		_prepCOD = "0"
		_COD = "0"
		_prepCOI = "0"
		_detCOI = "0"
		_COI = "0"
		_prepCO = "0"
		_CO = "0"
		_newallCO = IARRAY
		_adjCOD = ""
		_adjCOI = ""
		_adjCO = ""
		foreach _allCO ; _word
		{
			if _foundCOD == 0 && _word[0] == "0"
			{
				_detCOD = _word[1]
				_COD = _word[3]
				_result = DetermineWord(_COD)
				_type = SPLIT(_result[0]," ")
				_index = SPLIT(_result[1]," ")
				_indverb  = ASEARCH("verb",_type)
				_indname = ASEARCH("name",_type)
				if _indname != -1
				{
					_COD = nameslib[TOINT(_index[_indname])]
				}
				elseif _indverb != -1
				{
					_COD = verbslib[TOINT(_index[_indverb])]
				}
				_adjectives = SPLIT(_word[2]," ")
				foreach _adjectives ; _adj
				{
					_result = DetermineWord(_adj)
					_type = SPLIT(_result[0]," ")
					_index = SPLIT(_result[1]," ")
					_indadj  = ASEARCH("adjectif",_type)
					_indname = ASEARCH("name",_type)
					if _indadj != -1
					{
						_adjCOD += adjectiveslib[TOINT(_index[_indadj])] + ";"
					}
					elseif _indname != -1
					{
						_adjCOD += nameslib[TOINT(_index[_indname])] + ";"
					}
					_result = DetermineWord(_adj[0]+_COD[0])
					if _result[0] != "0"
					{
						_indname = ASEARCH("name",SPLIT(_result[0]," "))
						_COD = nameslib[TOINT((SPLIT(_result[1]," "))[_indname])]
					}
				}
				_foundCOD = 1
			}
			elseif _foundCOI == 0 && _word[0] != "0"
			{
				_prepCOI = _word[0]
				_detCOI = _word[1]
				_COI = _word[3]
				_result = DetermineWord(_COI)
				_type = SPLIT(_result[0]," ")
				_index = SPLIT(_result[1]," ")
				_indverb  = ASEARCH("verb",_type)
				_indname = ASEARCH("name",_type)
				if _indname != -1
				{
					_COI = nameslib[TOINT(_index[_indname])]
				}
				elseif _indverb != -1
				{
					_COI = verbslib[TOINT(_index[_indverb])]
				}
				_adjectives = SPLIT(_word[2]," ")
				foreach _adjectives ; _adj
				{
					_result = DetermineWord(_adj)
					_type = SPLIT(_result[0]," ")
					_index = SPLIT(_result[1]," ")
					_indadj  = ASEARCH("adjectif",_type)
					_indname = ASEARCH("name",_type)
					if _indadj != -1
					{
						_adjCOI += adjectiveslib[TOINT(_index[_indadj])] + ";"
					}
					elseif _indname != -1
					{
						_adjCOI += nameslib[TOINT(_index[_indname])] + ";"
					}
					_result = DetermineWord(_adj[0]+_COI[0])
					if _result[0] != "0"
					{
						_indname = ASEARCH("name",SPLIT(_result[0]," "))
						_COI = nameslib[TOINT((SPLIT(_result[1]," "))[_indname])]
					}
				}
				_foundCOI = 1
			}
			else
			{
				_prepCO = _word[0]
				_detCO = _word[1]
				_CO = _word[3]
				_result = DetermineWord(_CO)
				_type = SPLIT(_result[0]," ")
				_index = SPLIT(_result[1]," ")
				_indverb  = ASEARCH("verb",_type)
				_indname = ASEARCH("name",_type)
				if _indname != -1
				{
					_CO = nameslib[TOINT(_index[_indname])]
				}
				elseif _indverb != -1
				{
					_CO = verbslib[TOINT(_index[_indverb])]
				}
				_adjectives = SPLIT(_word[2]," ")
				foreach _adjectives ; _adj
				{
					_result = DetermineWord(_adj)
					_type = SPLIT(_result[0]," ")
					_index = SPLIT(_result[1]," ")
					_indadj  = ASEARCH("adjectif",_type)
					_indname = ASEARCH("name",_type)
					if _indadj != -1
					{
						_adjCO += adjectiveslib[TOINT(_index[_indadj])] + ";"
					}
					elseif _indname != -1
					{
						_adjCO += nameslib[TOINT(_index[_indname])] + ";"
					}
					_result = DetermineWord(_adj[0]+_COD[0])
					if _result[0] != "0"
					{
						_indname = ASEARCH("name",SPLIT(_result[0]," "))
						_CO = nameslib[TOINT((SPLIT(_result[1]," "))[_indname])]
					}
				}
				_newallCO ,= "%(_prepCO);;%(_detCO);;%(_adjCO);;%(_CO)"
			}
			
			_i++
		}
		
		_typesubject = DetermineWord(_subject[0])[0]
		_typeCOD = DetermineWord(_COD[0])[0]
		_typeCOI = DetermineWord(_COI[0])[0]
		
		//Finding all the words in the vocabulary
		
		if "name" _in_ DetermineWord("%(_subject)")[0]
		{
			_subject = nameslib[TOINT(DetermineWord("%(_subject)")[1])]
		}
		elseif DetermineWord("%(_subject)")[0] == "0"
		{
			unknownwords ,= "%(_subject)"
		}
		
		_result = DetermineWord(_verb)
		_type = SPLIT(_result[0]," ")
		_index = SPLIT(_result[1]," ")
		
		if ASEARCH("verb",_type) != -1
		{
			_i = TOINT(_index[TOINT(ASEARCH("verb",_type))])
			if _verb == "%(verbslib[_i][1])" && (_modal == "" || _modal == "0")
			{
				_tense = "past"
			}
			elseif  _modal == "" ||  _modal == "0"
			{
				_tense = "present"
			}
			_verb = verbslib[_i]
		}
		elseif ASEARCH("name",_type) != -1
		{
			_verb = nameslib[TOINT(_index[TOINT(ASEARCH("name",_type))])]
		}
		
		//Start the teaching process if Azura doesn't know the _word.
		//if ARRAYSIZE(_unknownwords) != 0
		//{
			//TeachAzuraName
		//}
		//elseif ARRAYSIZE(_unknownverb) != 0
		//{
			//TeachAzuraVerb
		//}
		if ARRAYSIZE(_adjCOD) == 0
		{
			_adjCOD = "0"
		}
		if ARRAYSIZE(_adjCOI) == 0
		{
			_adjCOI = "0"
		}
		
		if _negation != "1"
		{
			if ASEARCH("hello",_complement) != -1 || ASEARCH("hi",_complement) != -1 || ASEARCH("howdy",_complement) != -1 || ASEARCH("hey",_complement) != -1
			{
				if "Hello %(username).\w7 " !_in_ _respond
				{
					_respond += "Hello %(username).\w7 "
				}
			}
			
			_complement=TOSTR(_complement)
			//So depending on the type of the sentence, the responses would be different
			if _phrasetype == "whatquestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = WhatThinkP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = WhatAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += WhatAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							}
						}
						else
						{
							_response = WhatAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = WhatMovementP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = WhatHobbyP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
					
				}
				elseif _verb[4] == "creation"
				{
					_response = WhatCreationP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = WhatStatusP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = WhatSeeP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = WhatSmellP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = WhatTasteP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = WhatHearP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
						
					}
					elseif _verb[0] == "touch"
					{
						_response = WhatTouchP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = WhatHaveP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = WhatImagineP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = WhatActionP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
				
			}
			elseif _phrasetype == "howquestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = HowThinkP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = HowAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = HowAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = HowMovementP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = HowHobbyP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = HowCreationP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = HowStatusP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = HowSeeP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = HowSmellP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = HowTasteP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = HowHearP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = HowTouchP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = HowHaveP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = HowImagineP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = HowActionP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			elseif _phrasetype == "wherequestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = WhereThinkP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = WhereAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = WhereAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = WhereMovementP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = WhereHobbyP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = WhereCreationP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = WhereStatusP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = WhereSeeP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = WhereSmellP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = WhereTasteP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = WhereHearP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = WhereTouchP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = WhereHaveP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = WhereImagineP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = WhereActionP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			elseif _phrasetype == "whenquestion"
			{
				
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = WhenThinkP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = WhenAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = WhenAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = WhenMovementP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = WhenHobbyP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = WhenCreationP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = WhenStatusP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = WhenSeeP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = WhenSmellP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = WhenTasteP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = WhenHearP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = WhenTouchP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = WhenHaveP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = WhenImagineP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = WhenActionP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			elseif _phrasetype == "whichquestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = WhichThinkP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = WhichAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = WhichAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = WhichMovementP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = WhichHobbyP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = WhichCreationP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = WhichStatusP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response += WhichSeeP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = WhichSmellP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = WhichTasteP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = WhichHearP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = WhichTouchP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = WhichHaveP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = WhichImagineP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = WhichActionP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			elseif _phrasetype == "modalquestion"
			{
				_respond += "This part hasn't been implemented yet.\w7 "
			}
			elseif _phrasetype == "normalquestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = QuestionThinkP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = QuestionAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = QuestionAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = QuestionMovementP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = QuestionHobbyP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = QuestionCreationP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = QuestionStatusP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = QuestionSeeP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = QuestionSmellP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = QuestionTasteP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = QuestionHearP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = QuestionTouchP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = QuestionHaveP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = QuestionImagineP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = QuestionActionP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			else
			{
				//Checking the verb
				if "%(_verb[4])" == "avis"
				{
					
					//We're checking if the user is using the __verb think
					if "%(_verb[0])" == "think"
					{
						_response = NormalThinkP((_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO))
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif (TOINT("%(_verb[5])") >= 0 && _verb[5] != "none") || (TOINT("%(_verb[6])") >= 0 && _verb[6] != "none")
					{
						if "verb" _in_ _typeCOD
						{
							
							//The option if the COD isn't a noun but a verb
							_response = NormalAvisVP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							//Here, the person is telling an opinion about something, or somebody
							//It misses the error message and the last options
							_response = NormalAvisNP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
					else
					{
						if "verb" _in_ _typeCOD
						{
							//The option if the COD isn't a noun but a verb
							_response = NormalAvisVN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							//Here, the person is telling an opinion about something, or somebody
							//It misses the error message and the last options
							_response = NormalAvisNN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif "%(_verb[4])" == "mov"
				{
					_response = NormalMovementP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif "%(_verb[4])" == "hobby"
				{
					_response = NormalHobbyP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif "%(_verb[4])" == "creation"
				{
					_response = NormalCreationP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif "%(_verb[4])" == "stat"
				{
					_somme = 0
					foreach  _adjCOD ; _adj
					{
						_somme += TOINT(_adj[2])
							
					}
					if _somme >= 0
					{
						_response = NormalStatusP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_response = NormalStatusN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
				}
				elseif "%(_verb[4])" == "sense"
				{
					//So the five senses
					if _verb[0] == "see"
					{
						//Starting with the seeing
						_response = NormalSeeP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = NormalTouchP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = NormalSmellP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = NormalHearP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = NormalTasteP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = NormalHaveP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
						
				}
				elseif "%(_verb[4])" == "imagin"
				{
					_response = NormalImagineP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif "%(_verb[4])" == "action"
				{
					_response = NormalActionP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb == "" || _verb == "0" || _verb == 0
				{}
				else
				{
					_respond += "I didn't recognize the type of the verb,\w5 that's a huge problem.\w7 "
				}
			}
			if verbslib[0][0] != "" && verbslib[0][1] == ""
			{
				_respond += "Something emptyed the datas about the first verb. \w7Whatever you just told to me, \w5it's what did it.\w7 Could you report it the sooner you can please ?\w7 It's not the kind of bug that can wait,\w5 Levidre needs to solve it immediately.\w7 "
			}
		}
		else
		{
			if ASEARCH("hello",_complement) != -1 || ASEARCH("hi",_complement) != -1 || ASEARCH("howdy",_complement) != -1 || ASEARCH("hey",_complement) != -1
			{
				_response = "Hello %(username).\w7 "
				if _response !_in_ _respond
				{
					_respond += _response
				}
			}
			
			//So depending on the type of the sentence, the responses would be different
			if _phrasetype == "whatquestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = WhatThinkN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = WhatAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = WhatAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = WhatMovementN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = WhatHobbyN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = WhatCreationN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = WhatStatusN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = WhatSeeN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = WhatSmellN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = WhatTasteN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = WhatHearN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = WhatTouchN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = WhatHaveN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = WhatImagineN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = WhatActionN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
				
			}
			elseif _phrasetype == "howquestion"
			{
				
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = HowThinkN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = HowAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = HowAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = HowMovementN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = HowHobbyN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = HowCreationN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = HowStatusN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = HowSeeN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = HowSmellN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = HowTasteN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = HowHearN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = HowTouchN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = HowHaveN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = HowImagineN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = HowActionN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			elseif _phrasetype == "wherequestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = WhereThinkN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = WhereAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = WhereAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = WhereMovementN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = WhereHobbyN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = WhereCreationN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = WhereStatusN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = WhereSeeN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = WhereSmellN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = WhereTasteN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = WhereHearN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = WhereTouchN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = WhereHaveN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = WhereImagineN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = WhereActionN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			elseif _phrasetype == "whenquestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = WhenThinkN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = WhenAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = WhenAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = WhenMovementN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = WhenHobbyN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = WhenCreationN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = WhenStatusN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = WhenSeeN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = WhenSmellN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = WhenTasteN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = WhenHearN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = WhenTouchN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = WhenHaveN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = WhenImagineN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = WhenActionN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			elseif _phrasetype == "whichquestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = WhichThinkN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = WhichAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = WhichAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = WhichMovementN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = WhichHobbyN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = WhichCreationN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = WhichStatusN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = WhichSeeN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = WhichSmellN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = WhichTasteN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = WhichHearN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = WhichTouchN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = WhichHaveN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = WhichImagineN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = WhichActionN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			elseif _phrasetype == "modalquestion"
			{
				_respond += "This part hasn't been implemented yet.\w7 "
			}
			elseif _phrasetype == "normalquestion"
			{
				//Checking what type of __verb it is
				if _verb[4] == "avis"
				{
					//The __verb think doesn't work the same way as other
					if _verb[0] == "think"
					{
						//I have to do something for the verb think
						_response = QuestionThinkN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						//So if the __verb isn't the _verb think, it's just a question about Azura's opinion on something
						if TOINT(_verb[6]) >= 0
						{
							_response = QuestionAvisN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							_response = QuestionAvisP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif _verb[4] == "mov"
				{
					_response = QuestionMovementN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "hobby"
				{
					_response = QuestionHobbyN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "creation"
				{
					_response = QuestionCreationN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "stat"
				{
					_response = QuestionStatusN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "sense"
				{
					if _verb[0] == "see"
					{
						_response = QuestionSeeN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = QuestionSmellN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = QuestionTasteN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = QuestionHearN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = QuestionTouchN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = QuestionHaveN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif _verb[4] == "imagin"
				{
					_response = QuestionImagineN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[4] == "action"
				{
					_response = NormalActionN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb[0] == "" || _verb[0] == "0"
				{}
				else
				{
					_respond += "I didn't understand what type of verb it was.\w7 It's quit annoying.\w7 "
				}
			}
			else
			{
				//Checking the verb
				if "%(_verb[4])" == "avis"
				{
					
					//We're checking if the user is using the __verb think
					if "%(_verb[0])" == "think"
					{
						_response = NormalThinkN((_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO))
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif (TOINT("%(_verb[5])") >= 0 && _verb[5] != "none") || (TOINT("%(_verb[6])") >= 0 && _verb[6] != "none")
					{
						if "verb" _in_ _typeCOD
						{
							
							//The option if the COD isn't a noun but a verb
							_response = NormalAvisVN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							//Here, the person is telling an opinion about something, or somebody
							//It misses the error message and the last options
							_response = NormalAvisNN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						
					}
					else
					{
						if "verb" _in_ _typeCOD
						{
							//The option if the COD isn't a noun but a verb
							_response = NormalAvisVP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
						else
						{
							//Here, the person is telling an opinion about something, or somebody
							//It misses the error message and the last options
							_response = NormalAvisNP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
							if _response !_in_ _respond
							{
								_respond += _response
							}
						}
					}
				}
				elseif "%(_verb[4])" == "mov"
				{
					_response = NormalMovementN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif "%(_verb[4])" == "hobby"
				{
					_response = NormalHobbyN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif "%(_verb[4])" == "creation"
				{
					_response = NormalCreationN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif "%(_verb[4])" == "stat"
				{
					_somme = 0
					foreach  _adjCOD ; _adj
					{
						_somme += TOINT(_adj[2])
							
					}
					if _somme >= 0
					{
						_response = NormalStatusN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_response = NormalStatusP(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
				}
				elseif "%(_verb[4])" == "sense"
				{
					//So the five senses
					if _verb[0] == "see"
					{
						//Starting with the seeing
						_response = NormalSeeN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "touch"
					{
						_response = NormalTouchN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "smell"
					{
						_response = NormalSmellN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "hear"
					{
						_response = NormalHearN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[0] == "taste"
					{
						_response = NormalTasteN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					elseif _verb[1] == "had"
					{
						_response = NormalHaveN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
						if _response !_in_ _respond
						{
							_respond += _response
						}
					}
					else
					{
						_respond += "I don't know of which sense you're speaking of.\w7 "
					}
				}
				elseif "%(_verb[4])" == "imagin"
				{
					_response = NormalImagineN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif "%(_verb[4])" == "action"
				{
					_response = NormalActionN(_tense,_complement,_verb,_detsubject,_adjsubject,_subject,_detCOD,_adjCOD,_COD,_prepCOI,_detCOI,_adjCOI,_COI,_newallCO)
					if _response !_in_ _respond
					{
						_respond += _response
					}
				}
				elseif _verb == "" || _verb == "0"
				{}
				else
				{
					_respond += "I didn't recognize the type of the verb,\w5 that's a huge problem.\w7 "
				}
			}
			//if verbslib[0][0] != "" && verbslib[0][1] == ""
			//{
				//_respond += "Something emptyed the datas about the first verb. \w7Whatever you just told to me, \w5it's what did it.\w7 Could you report it the sooner you can please ?\w7 It's not the kind of bug that can wait,\w5 Levidre needs to solve it immediately.\w7 "
			//}
			
		}
		
		_prevnegation = _negation
		_prevphrasetype = _phrasetype
		_prevtense = _tense
		_prevmodal =  _modal
		_prevverb = verb
		_prevdetsubject = _subject
		_prevadjsubject = _adjsubject
		_prevsubject = _subject
		_prevfirstprep =  _firstprep
		_prevdetCOD =  _detCOD
		_prevadjCOD =  _adjCOD
		_prevCOD = _COD
		_prevsecondprep =  _secondprep
		_prevdetCOI =  _detCOI
		_prevadjCOI =  _adjCOI
		_prevCOI = _COI
		_prevotherwords = _otherwords
		_prevcomplement = _complement
	}
	--
	if _respond != "* "
	{
		"%(_respond)"
	}
	
	
}


