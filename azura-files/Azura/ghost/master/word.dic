//---------------------------Envelopes--------------------------
//This .dic file is probably one of the simplest you will have to edit, and in fact, if the way it works doesn't appeal to you, you can completely ignore it if you like!
//Basically, what this file does is set up certain things that I believe are called envelopes or SakuraScriptEnv on the CROW-SSP Dictionary site (which I link to a few times throughout the walkthrough), but I've always kind of thought of them as variables. Envelopes is probably a less confusing name though.
//Essentially, what this file is for is for creating lists populated with items, and storing them in a word that can later be called during dialogue. If you've read the walkthrough or gone through any of the other .dic files, you've probably seen these before. They are always preceded with a % sign and have a word in parentheses (well, almost always) afterwards. %(username) is one, which displays the user's name, and %(heshe) is another, which displays the right pronoun depending on what the user selected in bootend.dic or menu.dic. Other ones you might not have seen include %(passmin), which shows how many minutes have passed since the ghost was started, %(screenheight) which shows the height of the display they're currently on, and %(keroname) for the name of the second character, among many, many others. Many of these are predefined by the AYA scripting and will be listed on the CROW-SSP site mentioned above, and many of them you will never have to use. By far the ones you will be using the most will be %(username) and the pronoun ones, and those are the only ones you'll have to worry about normally.

//So where does this file come in? Well, you can define your own envelopes if you want! Which means essentially that you can create a list of items and attach it to almost any word you want. Here's an example.

exampleenvelope
{
	"Example Envelope Dialogue 1"
	"Example Envelope Dialogue 2"
	"Example Envelope Dialogue 3"
}

//As you can see, we stated a word, opened some brackets, wrote some text, and closed the brackets. Now when you write ghost dialogue, you can write %(exampleenvelope) and your ghost will randomly display any of the three bits of text within the brackets! You can go ahead and test this yourself to see how it works, and I'll include some sample dialogue with this in aitalk.dic.
//Note: Do not put commas in your list entries unless you're doing a double envelope as detailed further below.

//Now, what is the actual use of these envelopes? You can store tons of random information in any kind of envelope you want to keep your ghost's dialogue varied! You can store various cities you like in %(city), musicians you like in %(musicians), places your ghost has been in %(places), food you like in %(food), movies you like in %(movie), fandoms you like in %(fandom), characters you like in %(fandomcharacter), celebrities you like under %(celebrity) or friends of yours in %(friends) or bnfs in %(bnfs), folders on your computer under %(folders), Pokemon you like under %(pokemon), insults under %(insult), swear words under %(swearword) which could potentially be hilarious, just about anything! You can make lists of absolutely anything to use with dialogue for your ghost! This .dic file is only limited by your imagination!
//Not only that, but you can put an envelope IN an envelope. Here's another example.

internalenvelope
{
	"Internal Envelope Dialogue 1 - %(exampleenvelope)"
	"%(username)'s computer"
	"Here is a blanklist object - %(blanklist)."
}

//So you see, you can even nest envelopes if you want! This is particularly handy with %(username), so your ghost can be specific if they're talking about something of the user's, like their files or folders for example. I'll leave a few lists in here you can fill out as you like. And if this doesn't give you ideas, you can ignore this file, since nothing in it will show up unless you write it into the dialogue. You can add or take away as many items as you want from each list.

lsta
{
	"\i[2001]\f[italic,true]"
}

lsto
{
	"\f[italic,false]\i[2002]"
}

arms
{
	if alreadyeat < 2 || timeslot != "lunch"
	{
		if holdobsidian == 1
		{
			"\i[67]"
		}
		elseif oncomputer == 1
		{
			"\i[60]"
		}
		elseif isdrawing == 1
		{
			"\i[62]"
		}
		else
		{
			"\i[70]"
			"\i[71]"
			--
			"\i[90]"
			"\i[91]"
		}
		
	}
}

smile
{
	if azfeel >= 1
	{
		"\i[45]"
		if azpunched <= 0
		{
			"\i[50]"
		}
		else
		{
			"\i[52]"
		}
	}
	elseif azfeel == 0
	{
		
		"\i[40]"
		if azpunched > 0
		{
			"\i[52]"
		}
		else
		{
			"\i[46]"
		}
	}
	else
	{
		if azpunched <= 0
		{
			"\i[40]"
		}
		else
		{
			"\i[52]"
		}
	}
}

bodypart
{
	"eyes"
	"legs"
	"tail"
	"wings"
	"hair"
}

niceanime
{
	"Assassination Classroom"
	"Code Geass"
	"Gurren Lagann"
	"Kiseiju"
	"Rokka no Yuusha"
	"One Punch Man"
	"Date a Live"
	"Ergo Proxy"
	"Sword Art Online"
	"Death Parad"
	"Neon Genesis Evangelion"
	"Noragami"
	"Kekkai Sensen"
	"M3 Sono Kuroki Hagane"
	"Angel Beats"
	"Soul Eater"
	"Steins Gate"
	"Utawarerumono"
	"Kiba"
	"Serial Experiment Lain"
	"Accel World"
	"Mahou Tsukai no Yome"
	"Black Cat"
}

niceopening
{
	"\_a[https://www.youtube.com/watch?v=dpe0vawXHU0]Assassination Classroom\_a"
	"\_a[https://www.youtube.com/watch?v=tiP6vUVEfsw]Code Geass\_a"
	"\_a[https://www.youtube.com/watch?v=PKRUKalbx3s]Gurren Lagann\_a"
	"\_a[https://www.youtube.com/watch?v=D-SQqppuGvc]Kiseiju\_a"
	"\_a[https://www.youtube.com/watch?v=QImBolnTVH8]One Punch Man\_a"
	"\_a[https://www.youtube.com/watch?v=fC0HuPd163U]Date a live\_a"
	"\_a[https://www.youtube.com/watch?v=2ZN-zAKIfyQ]Ergo Proxy\_a"
	"\_a[https://www.youtube.com/watch?v=KId6eunoiWk]Sword Art Online\_a"
	"\_a[https://www.youtube.com/watch?v=_DwbXmr70C0]Death Parad\_a"
	"\_a[https://www.youtube.com/watch?v=aEAdPqsw_o4]Neon Genesis Evangelion\_a"
	"\_a[https://www.youtube.com/watch?v=-retejC9qeU]Noragami\_a"
	"\_a[https://www.youtube.com/watch?v=rOU4YiuaxAM]Kekkai Sensen\_a"
	"\_a[https://www.youtube.com/watch?v=tfNIPuxSYNc]M3 Sono Kuroki Hagane\_a"
	"\_a[https://www.youtube.com/watch?v=BYq8qOLa1gQ]Angel Beats\_a"
	"\_a[https://www.youtube.com/watch?v=WeCEjloQ-qE]Soul Eater\_a"
	"\_a[https://www.youtube.com/watch?v=oXHmgC6JoEc]Steins Gate\_a"
	"\_a[https://www.youtube.com/watch?v=kLiaFXFx9EM]Utawarerumono\_a"
	"\_a[https://www.youtube.com/watch?v=oh2iEwfX1GU]Kiba\_a"
	"\_a[https://www.youtube.com/watch?v=4-PkAQcuZOw]Serial Experiment Lain\_a"
	"\_a[https://www.youtube.com/watch?v=yCjybcj9e58]Accel World\_a"
	"\_a[https://www.youtube.com/watch?v=ScmLEI_gLO0]Mahou tsukai no Yome\_a"
	"\_a[https://www.youtube.com/watch?v=AkAGiAtouLk]Black Cat\_a"
	
}

trashanime
{
	"Tokyo Ghoul"
	"Elfen Lied"
	"Another"
	"Shingeki no Kyojin"
	"Corpse Party"
	"Higurashi no Naku Koro ni"
	"Terra Formars"
	"Shiki"
	"Mirai Nikki"
}

trashopening
{
	"\_a[https://www.youtube.com/watch?v=MjXiRVaoiAw]Tokyo Ghoul\_a"
	"\_a[https://www.youtube.com/watch?v=MPVq30bPq6I]Elfen Lied\_a"
	"\_a[https://www.youtube.com/watch?v=3llgfBhLp3A]Another\_a"
	"\_a[https://www.youtube.com/watch?v=sA7qYWH-UvU]Shingeki no Kyojin\_a"
	"\_a[https://www.youtube.com/watch?v=yXVnap7Zb2o]Corpse Party\_a"
	"\_a[https://www.youtube.com/watch?v=9opZi6PluKI]Higurashi no Naku Koro ni season 1\_a"
	"\_a[https://www.youtube.com/watch?v=tbVwVvWxv-4]Higurashi no Naku Koro ni season 2\_a"
	"\_a[https://www.youtube.com/watch?v=6xBwYm0cZfQ]Shiki\_a"
	"\_a[https://www.youtube.com/watch?v=ZZvJY7_gyfw]Mirai Nikki\_a"
}

shojoanime
{
	"Vampire Knight"
	"Clannad"
	"Cardcaptor Sakura"
	"Chobits"
	
}

shojoopening
{
	"\_a[https://www.youtube.com/watch?v=609S3Uj9Ja8]Vampire Knight\_a"
	"\_a[https://www.youtube.com/watch?v=LZC8hqvXlOA]Clannad\_a"
	"\_a[https://www.youtube.com/watch?v=m76lKsM_jaU]Clannad After Story\_a"
	"\_a[https://www.youtube.com/watch?v=zzIUgOVGYCs]Cardcaptor Sakura (french opening)\_a"
	"\_a[https://www.youtube.com/watch?v=6YBDo5S8soo]Cardcaptor Sakura (japanese opening)\_a"
	"\_a[https://www.youtube.com/watch?v=Z23hfdJlNJ4]Chobits\_a"
}

nicemanga
{
	"Pandora Heart"
	"Sankarea"
	"Seraph of the End"
	"D.Gray Man"
	"Darwin's Game"
	"Deadman Wonderland"
	"Claymore"
}

treat
{
	"candy"
	"chocolate"
	"biscuit"
	"cake"
	"slice of pie"
	"cookie"
	"marshmallow"
	"piece of marzipan"
	"chocolate bar"
	"pancake"
}

normalfood
{
	"an egg"
	"bacon"
	"a sausage"
	"a hot dog"
	"a hot cat"
	"spaghetties"
	"a poutine"
	"a pizza"
	"a steak"
	"french fries"
	"a sandwitch"
	"a hamburger"
	"a quiche"
	"a soup"
	
}

drawing
{
	"skeleton"
	"dragon"
	"big eagle"
	"flower"
	"landscape"
	"tree"
	"human"
	"monster"
	"pie"
	"ghost"
	"pokemon"
	"little green character"
	"set of three golden trianges"
	"goat"
	"house"
	"cave"
	"forest"
	"fire"
	"lizard"
	"fish"
	"wolf"
}

color
{
	"blue"
	"red"
	"green"
	"magenta"
	"cyan"
	"black"
	"yellow"
	"purple"
	"grey"
	"orange"
	"white"
}
//This envelope in particular I think is fun. You can use this in dialogue to pretend like your ghost is looking through your user's files!

usersfolder
{
	"%(username)'s Recycle Bin"
	"%(username)'s Document folder"
	"%(username)'s secret folder"
}


//Now, this next envelope is unique. I'm just going to leave it the way that cindysuke wrote it, but look carefully. This list has TWO values, separated by a comma. You can see the first is the Korean word, and the second is the definition of the word. This is used for a bit of dialogue cindysuke wrote where their ghost would teach the user a word in Korean. 
//You can set up double envelopes like this too by following this format! However, it does require a bit of fancier coding in aitalk to get it to work right. I'll leave an example of it in aitalk so you can study it.

lessonkor
{
	"사과(sa-gua),apple"
	"노동(no-dong),labor"
	"손가락(son-ga-rak),finger"
	"마르크스(ma-r-k-s),Marx"
	"자본주의(ja-bon-ju-yi),capitalism"
}

//You can also format your envelopes like this as one line separated by semicolons, but personally I think the spaced lists above look nicer. It's up to you however you want to set them up.

blanklistparagraph
{
	"List paragraph 1"; "List paragraph 2"; "List paragraph 3"; "List paragraph 4"; "List paragraph 5";
}


 //**** Don't touch this ***************************************************************
 //This is code stuff and nothing for you to worry about, just save the .dic and move on! You're done!
 
 On_\person
{
 	person
}
