//Here we are, the FLELE functions, the music player. The ogg musics don't played because I hadn't added the settings for yet. The musics aren't load correctly too because of a problem when the current playlist is empty : only one music is added when the current playlist is empty.
//What had change are Select.backmumenu and all about hotkeys and the keyboard controls. OnKeyPress too.

//I'm curious about something else too. I read that sstp was like an internet protocol and that ssp was using DirectSSTP to communicate with the ghosts, but that there is an other process to communicate with ghosts that aren't on the computer but somewhere else (I'm sorry, I don't remember the name), I know ssp is having an messenger thing so I guess that's what it's using, but I don't know more about it.
//linch-nas-ploh
Select.Musicmenu
{
	if holdobsidian == 1
	{
		"\0%(lsto)* I'm quite busy right now."
		"\0%(lsto)* I can't really do anything right now."
		"\0%(lsto)* I can't use my laptop with a cat in my arms."
	}
	else
	{
		"\0\b2"
		--
		suppr = 0 //Because when the user go to erase a song or a playlist and go back in the menu without erasing anything, the suppr mode is still active so the next thing selected would be erased
		if isdrawing == 1
		{
			"\![embed,OnDrawing]"
		}
		if issat != 1
		{
			"* Two seconds. \![embed,OnChangePose]\w9\w9"
		}
		else
		{
			"* "
		}
		--
		if oncomputer != 1
		{
			"\![embed,OnOCComputer]"
		}
		--
		if boarddisplayed != 1
		{
			"So you want to hear some musics ?\w7 Here if you want."
		}
		else
		{
			"Yes ?"
			"What do you want ?"
			"Yep ?"
		}
		--
		"\w5\_q\n\n[half]"
		--
		if muprecision != 0
		{
			"\1* Here you have the commands of the player, you can change them if you want.\n\n[half]"
			--
			"Play-Pause %(keyplay)    Stop %(keystop)	\nNext music %(keynext)    Previous music %(keyprev) \nClear playlist %(keyclear)    Dashboard %(keyboard)\n\n[half]"
		}
		
		--
		"\0* You can use the dashboard of my computer if you want, or change the controls of the player.\n\n[half]"
		--
		"\![*]\q[Controls settings,controlsetting]   \![*]\q[Change play mode,changemode]\n\![*]\q[Rename a song,startrename]"
		--
		"\n\n[half]\f[italic,true]You can ask her to :\f[italic,false]\n\n[half]"
		--
		if isplayed != 1
		{
			"\![*]\q[Play,muinplaylist]"
		}
		else
		{
			"\![*]\q[Stop,playmu]             \![*]\q[Change the music,muinplaylist]"
		}
		--
		"\n\![*]\q[Remove a song,removes]    \![*]\q[Clear playlist,cleanplaylist]\n\n[half]\![*]\q[Save a playlist,saveorupdate]  \![*]\q[Remove a playlist,removep]\n\![*]\q[Open a playlist,Openplaylist]  \![*]\q[Erase all playlists,cleanallplaylists]"
		--
		"\n\n[half]\![*]\q[Show the dashboard,showboard]    \![*]\q[Close,close]"
	}
	--
	"\e"
}

ProcessMusicAnchors
{
	case reference0
	{
		//It's if the user want to change the playing mode. This will reset the playlists already read except for randomly because if the user doesn't want to quit the random mode, the player will continue to play normally.
		when "onemu" //if the link is this value
		{
			"\![leave,passivemode]* One music will be played.\e"
			playmode = reference0
			muplayed = IARRAY
			break
		}
		when "onemuloop" //if the link is this value
		{
			"\![leave,passivemode]* The same music will be played in loop.\e"
			playmode = reference0
			muplayed = IARRAY
			break
		}
		when "oneplaylist" //if the link is this value
		{
			"\![leave,passivemode]* The whole playlist will be played.\e"
			playmode = reference0
			muplayed = IARRAY
			break
		}
		when "playlistloop"
		{
			"\![leave,passivemode]* The playlist will be played in loop.\e"
			playmode = reference0
			muplayed = IARRAY
			break
		}
		when "random"
		{
			"\![leave,passivemode]* The musics will be played randomly.\e"
			playmode = reference0
			break
		}
		when "prevplaylist"
		{   
			"\![leave,passivemode]\![raise,OnChoiceSelect,loadprevplaylist]"
			break
		}
	}
	
	foreach totalsongs ; song 
	{
		//If the user selected a song
		_name = "%((SPLITPATH(song[0]))[2])"
		_name = REPLACE(_name,"[","t")
		_name = REPLACE(_name,"]","t")
		_name = REPLACE(_name,"(","t")
		_name = REPLACE(_name,")","t")
		_name = REPLACE(_name,"{","t")
		_name = REPLACE(_name,"}","t")
		_name = REPLACE(_name,",","t")
		_name = REPLACE(_name,"\","t")
		_name = REPLACE(_name,"!","t")
		if reference0 == "%(_name)"
		{
			"\![leave,passivemode]"
			//This music would be removed or played depending on what he wanted.
			--
			if rename == 1
			{
				if "%(song[1])" != ""
				{
					RenameSong(song[1])
				}
				else
				{
					RenameSong(_name)
				}
			}
			elseif suppr != 1
			{
				isplayed = 0
				songplayed = song
				Select.playmu
			}
			else
			{
				suppr = 0
				songremoved = song
				Removesong
			}
			rename=0
		}
		
	}
	--
	if reference0 == TOINT(reference0)
	{
		"\![leave,passivemode]"
		//This music would be removed or played depending on what he wanted.
		--
		if suppr != 1
		{
			isplayed = 0
			songplayed = TOINT(reference0)
			if displaytest == 1
			{
				"* I want %(songplayed)"
			}
			Select.playmu
		}
		else
		{
			"* You cannot remove a song of a CD.\e"
		}
	}
	--
	foreach playlistlist ; playlist
	{
		//The same things than for the songs but for the playlists.
		//The change is that instead of playing a music begin the processus for loading the playlist, so playlistload change to 1. This will change the use of the other functions called.
		if reference0 == "%(playlist)"
		{
			"\![leave,passivemode]"
			--
			if suppr != 1
			{
				if displaytest == 1
				{
					"* I load a playlist so I will save first the one I already have.\n"
				}
				--
				nbmudropped = 0
				//The fist step in loading a playlist is saving the current one.
				if currentplaylist != "newone" || ARRAYSIZE(songlist) < 1
				{
					currentplaylist = "%(playlist)"
					Select.cleanplaylist("load","%(playlist)")
				}
				else
				{
					currentplaylist = "%(playlist)"
					playlistname = "tempplaylist"
					Select.saveplaylist
					--
					Select.cleanplaylist("load","%(playlist)")
				}
			}
			else
			{
				//If the user want to remove a playlist. I have to do a function to erase the file too.
				suppr = 0
				playlistremoved = playlist
				Removeplaylist
			}
		}
	}
}


OnKeyPress
{
	if reference0 == "t"
	{
		OnAiTalk
	}
	elseif reference0 == "r"
	{
		OnLastTalk
	}
	elseif reference0 == "f1"
	{
		
		"\![open,readme]"
	}
	else
	{	
		//setkey if the command the user chose to change, if he didn't choose any command to change, setkey would be empty.
 		if setkey == "keyplay"
		{
			if reference0 _in_ "%(keystop) %(keynext) %(keyprev) %(keyclear) %(keyboard)"
			{
				"* You already chose this command for something else, \w5you cannot use it twice."
				--
				"\![leave,passivemode]"
			}
			else
			{
				keyplay = reference0
			}
		}
		elseif setkey == "keystop"
		{
			if reference0 _in_ "%(keyplay) %(keynext) %(keyprev) %(keyclear) %(keyboard)"
			{
				"* You already chose this command for something else, \w5you cannot use it twice."
				--
				"\![leave,passivemode]"
			}
			else
			{
				keystop = reference0
			}
		}
		elseif setkey == "keynext"
		{
			if reference0 _in_ "%(keyplay) %(keystop) %(keyprev) %(keyclear) %(keyboard)"
			{
				"* You already chose this command for something else, \w5you cannot use it twice."
				--
				"\![leave,passivemode]"
			}
			else
			{
				keynext = reference0
			}
		}
		elseif setkey == "keyprev"
		{
			if reference0 _in_ "%(keyplay) %(keystop) %(keynext) %(keyclear) %(keyboard)"
			{
				"* You already chose this command for something else, \w5you cannot use it twice."
				--
				"\![leave,passivemode]"
			}
			else
			{
				keyprev = reference0
			}
		}
		elseif setkey == "keyclear"
		{
			if reference0 _in_ "%(keyplay) %(keystop) %(keynext) %(keyprev) %(keyboard)"
			{
				"* You already chose this command for something else, \w5you cannot use it twice."
				--
				"\![leave,passivemode]"
			}
			else
			{
				keyclear = reference0
			}
		}
		elseif setkey == "keyboard"
		{
			if reference0 _in_ "%(keyplay) %(keystop) %(keynext) %(keyprev) %(keyclear)"
			{
				"* You already chose this command for something else, \w5you cannot use it twice."
				--
				"\![leave,passivemode]"
			}
			else
			{
				keyboard = reference0
			}
		}
		else
		{
			//The user didn't want to change a command, so the commands would be verified and lead to which has been pressed.
			if muhotkey == "ON"
			{
				if reference0 == keyplay
				{
					if isplayed == 1
					{
						songpaused = songplayed
						paused = 1
						Select.playmu
					}
					else 
					{
						paused = 2
						if oncomputer != 1 && asleep != 1
						{
							"* Yes, \w5two seconds."
							--
							if issat!= 1
							{
								"\![embed,OnChangePose]"
							}
							--
							"\![embed,OnOCComputer]\w9\![raise,OnChoiceSelect,playmu]\e"
						}
						else
						{
							Select.playmu
						}
					}
				}
				elseif reference0 == keystop
				{
					paused = 0
					Select.playmu
				}
				elseif reference0 == keyprev
				{
					if oncomputer != 1 && asleep != 1
					{
						"* Yes, \w5two seconds."
						--
						if issat!= 1
						{
						"\![embed,OnChangePose]"
						}
						--
						"\![embed,OnOCComputer]\w9\![raise,OnChoiceSelect,previousmu]\e"
					}
					else
					{
						Select.previousmu
					}

				}
				elseif reference0 == keynext
				{
					if oncomputer != 1 && asleep != 1
					{
						"* Yes, \w5two seconds."
						--
						if issat!= 1
						{
						"\![embed,OnChangePose]"
						}
						--
						"\![embed,OnOCComputer]\w9\![raise,OnChoiceSelect,nextmu]\e"
					}
					else
					{
						Select.nextmu
					}
				}
				elseif reference0 == keyclear
				{
					Select.cleanplaylist
				}
				elseif reference0 == keyboard
				{
					Select.showboard
				}
			}
			else
			{
				if displaytest == 1
				{
					"* But the keyboard controls are OFF."
				}
			}
		}
	}
	--
	//Even if the user didn't want to change any command, always bring back setkey to empty to prevent any problem.
	setkey = ""
	//"\e"
}

//The settings--------------------------------------------------------------------------------------------------------------------

Select.changemode
{
	"* Which play mode do you want ?\n\n[half]\_q"
	--
	"\![*]\_a[onemu]\q\Play one music\_a    \n\![*]\_a[onemuloop]\q\The same music in loop\_a\n\![*]\_a[oneplaylist]\q\Read the whole playlist\_a    \n\![*]\_a[playlistloop]\q\Playlist in loop\_a\n\![*]\_a[random]\q\Play music randomly\_a"
	--
	"\n\n[half]\![*]\q[Go back,backmumenu]"
}

Select.controlsetting
{
	"* If you want to change the control settings. \w5The hotkeys are %(muhotkey).\n\n[half]"
	--
	"\![*]\q[Enable hotkeys,enablekey]    \![*]\q[Change the hotkeys,keysetting]"
	--
	"\n\n[half]\![*]\q[Go back,backmumenu]"
	
}

///The hotkeys settings----------------------------------------------------------------------------------------------------------------

//To allow the keyboard controls to work or not.
Select.enablekey
{
	if muhotkey == "ON"{muhotkey = "OFF"}
	else{muhotkey = "ON"}
	--
	"* The keyboard controls are now %(muhotkey).\n\n[half]"
	--
	"\![*]\q[OK,Musicmenu]"
}

//The choice of the keyboard control the user want to change.
Select.keysetting
{
	"* Which command do you want to change ?\_q\n\n[half]"
	--
	"\![*]\q[Play-Pause,setplaykey] %(keyplay)    \![*]\q[Stop,setstopkey] %(keystop)	\n\![*]\q[Next music,setnextkey] %(keynext)    \![*]\q[Previous music,setprevkey] %(keyprev) \n\![*]\q[Clear playlist,setclearkey] %(keyclear)    \![*]\q[Show dashboard,setshowkey] %(keyboard)"
	--
	if displaytest == 1
	{
		"\n\n[half]* I will stock your choice in setkey."
	}
	--
	"\n\n[half]\![*]\q[Go back,backmumenu]"
}

//The functions for the settings of the keyboard controls.
Select.setplaykey
{
	setkey = "keyplay"
	--
	"* Press the new key you want."
	--
	"\n\n[half]\![*]\q[I changed my mind,backmumenu]"
}
Select.setstopkey
{
	setkey = "keystop"
	--
	"* Press the new key you want."
	--
	"\n\n[half]\![*]\q[I changed my mind,backmumenu]"
}
Select.setnextkey
{
	setkey = "keynext"
	--
	"* Press the new key you want."
	--
	"\n\n[half]\![*]\q[I changed my mind,backmumenu]"
}
Select.setprevkey
{
	setkey = "keyprev"
	--
	"* Press the new key you want."
	--
	"\n\n[half]\![*]\q[I changed my mind,backmumenu]"
}
Select.setclearkey
{
	setkey = "keyclear"
	--
	"* Press the new key you want."
	--
	"\n\n[half]\![*]\q[I changed my mind,backmumenu]"
}
Select.setshowkey
{
	setkey = "keyboard"
	--
	"* Press the new key you want."
	--
	"\n\n[half]\![*]\q[I changed my mind,backmumenu]"
}

///The functions to modify the playlist-------------------------------------------------------------------------------------------------------------------------------------------------

Select.muinplaylist
{	
	"\![enter,passivemode]\b2"
	--
	if oncomputer != 1
	{
		"\![embed,OnOCComputer]"
	}
	--
	//The utility of the function changes depending of if you want to erase a music or to hear a music.
	if rename == 1
	{
		"* Which song do you want to rename ?\n\n[half]"
	}
	elseif suppr != 1
	{
		"* Here are the songs inside the playlist. "
		--
		if currentplaylist != "newone"
		{
			"\w6The playlist is '%(currentplaylist)'."
		}
		else
		{
			"\w6You didn't save this playlist yet."
		}
		--
		"\n\n[half]"
	}
	else
	{
		"* Which music do you want to remove ?\n\n[half]"
	}
	--
	"%(SelectableList)"
	--
	"\n\n[half]\![*]\q[Go back,backmumenu]"
	--
	if rename != 1
	{
		"    \![*]\q[Ok,close]"
	}
}

Select.loadprevplaylist
{
	"* I load the songs non already saved in your playlists.\n"
	--
	currentplaylist = "newone"
	Select.cleanplaylist("load","tempplaylist")
}
//Go back to the music menu.
Select.backmumenu
{
	setkey = ""
	--
	"\![leave,passivemode]"
	--
	rename = 0
	suppr = 0
	Select.Musicmenu
}

//To remove a song or a playlist
Select.removes
{
	if displaytest == 1
	{
		"* I enter the suppr mode.\n"
	}
	--
	//It's for removing a song
	suppr = 1
	Select.muinplaylist
}

Select.removep
{
	if displaytest == 1
	{
		"* I enter the suppr mode.\n"
	}
	--
	//It's for removing a playlist.
	suppr = 1
	Select.Openplaylist
}

//This erases all the playlists
Select.cleanallplaylists
{
	foreach playlistlist ; playlist
	{
		_f = FDEL("..\..\m3u_file\%(playlist).m3u")
		
	}
	--
	"* I erased all the  playlists.\e"
	--
	playlistlist = IARRAY
}
//The remove of the song	
Removesong
{
	templist = songlist
	songlist = IARRAY
	foreach templist ; song
	{
		if song != songremoved
		{
			songlist = (songlist,song)
		}
	}
	--
	"* I removed %((SPLITPATH(songremoved))[2]).\e"
}

//The remove of the playlist
Removeplaylist
{
	templist = playlistlist
	playlistlist = IARRAY
	foreach templist ; playlist
	{
		if playlist != playlistremoved
		{
			playlistlist = (playlistlist,playlist)
		}
	}
	_f = FDEL("..\..\m3u_file\%(playlistremoved).m3u")
	"* I removed %(playlistremoved).\e"
}

Select.cleanplaylist
{
	songlist = IARRAY
	muplayed = IARRAY
	//If the user just wanted to clean the playlist, nothing else happen. But it will clean the whole playlist before adding the musics of a playlist loaded if we're loading a playlist.
	if _argv[0] != "load"//playlistload != 1
	{
		currentplaylist = "newone"
		"* I have clean the playlist. \w5You can add new musics.\e"
	}
	else
	{
		if displaytest == 1
		{
			"* Cleanning the playlist before adding the musics of the playlist.\n"
		}
		--
		AddPlaylistDropped("..\..\m3u_file\%(_arv[1]).m3u")
	}
}

///The functions to save or update a playlist-------------------------------------------------------------------------------------------------------------------------------------------------

Select.saveorupdate
{
	"* Do you want to save the playlist ?\_q\n\n[half]\![*]\q[Save the playlist,nameplaylist]"
	--
	//If the playlist is already saved, the user can update it.
	if currentplaylist != "newone"
	{
		"\n\![*]\q[Update the current one,savecurrent]"
	}
	--
	"\n\n[half]\![*]\q[Go back,backmumenu]"
}

//Name the playlist saved.
Select.nameplaylist
{
	"* Which name do you want for your playlist ?\![open,inputbox,OnCheckplaylistname,-1]\e"
}

//Check if the name isn't already used for an other playlist, if yes, the user would have the choice to replace this playlist or to choose an other name.
OnCheckplaylistname
{
	playlistname = reference0 //The name entered by the user.
	--
	//For if the name is already used.
	if ASEARCH(reference0,playlistlist) != -1
	{
		"* You already have a playlist with this name,\w5 do you want to replace it ?\_q\n\n[half]"
		--
		"\![*]\q[Yes,saveplaylist]    \![*]\q[No,nameplaylist]"
	}
	else
	{
		//If the name isn't already used by a playlist, it would directly save the playlist.
		Select.saveplaylist
	}
}
//We already know the name of the playlist, so just go straight to the saving function
Select.savecurrent
{
	"* Alright,\w5 I save your modifications.\n"
	--
	if displaytest == 1
	
	{
			"* The name of your playlist is %(currentplaylist).\n"
	}
	--
	//Define the name of the playlist that would be saved.
	playlistname = "%(currentplaylist)"
	--
	Select.saveplaylist
}

//This will save a playlist for the user. The user will be able after that to load the playlist when he want. If he is loading a playlist, this would save the current musics in an other file before loading the playlist.
Select.saveplaylist
{
	//If a playlist is loading, or if the playlist is updating, we don't need to add the playlist to the list of playlist. If the playlist is updating, reference0 would be savecurrent because it's something selected.
	if _argv[0] != "load" && reference0 != "savecurrent"
	{
		if displaytest == 1
		{
			"* I save your playlist.\n"
		}
		currentplaylist = "%(playlistname)"
		//If the user enter the name of a playlist already used, it wouldn't add the name in the list of playlist because we would replace the playlist.
		if ASEARCH(playlistname,playlistlist) == -1
		{
			if ARRAYSIZE(playlistlist) <= 0
			{
				playlistlist = playlistname
			}
			else
			{
				playlistlist = (playlistlist,playlistname)
			}
		}
	}
	path = "..\..\m3u_file\%(playlistname).m3u"
	
	_di = (SPLITPATH(reference1)[0])+(SPLITPATH(reference1)[1])
	_f = FDEL(_di+"\tmp.m3u")
	--
	if displaytest == 1
	{
		"* I start by erasing any playlist with the same name.\n"
	}
	--
	_f = FDEL(path)
	
	//chemin de sortie m3u
	FCHARSET (0)
	if (FOPEN ("dat\tmp.m3u","w")) != 0 
	{
		if displaytest == 1
		{
			"* I add our songs to a temporary file.\n "
		}
		--
		foreach songlist ; song 
		{
			//Liste des chansons
			//Conversion de chemin absolu
			FWRITE ("dat\tmp.m3u",song)
		}
		FCLOSE ("dat\tmp.m3u")
		if (FCOPY ("dat\tmp.m3u",_di))==1 
		{
			if displaytest == 1
			{
				"* Then, this temporary file is saved as our new playlist.\n"
			}
			--
			_i = FRENAME (_di+"\tmp.m3u",path)
			//succes, chemin de sortie m3u
		}
	}
	
	--
	if _arv[0] != "load"
	{
		"* I have saved '%(playlistname)'.\e"
	}
	else
	{
		if displaytest == 1
		{
			"* And I have saved our previous musics before the loading of the playlist, the current playlist will be %(currentplaylist).\n"
		}
		--
		//If the user is loading a playlist, after saving the current song, it would clean the playlist before loading the playlist he want.
	}
}

//The user chose the playlist he want to load.
Select.Openplaylist
{
	myplaylists = ""
	"\![enter,passivemode]* Here are the playlists saved.\n\n[half]"
	--
	//It creates the list of the playlists that would be displayed, each name would be an anchor word.
	foreach playlistlist ; playlist
	{
		myplaylists = myplaylists + "\_a[%(playlist)]\_q\![*]%(playlist)\_a" + "\_q\n"
	}
	//It's the option to load the playlist that isn't saved.
	if currentplaylist != "newone"
	{
		myplaylists = myplaylists + "\_a[prevplaylist]\_q\![*]Load the non saved playlist\_a" + "\_q\n"
	}
	--
	//It finally display all the name of the playlists.
	"%myplaylists\n\n[half]\![*]\q[Go back,backmumenu]    \![*]\q[Ok,close]"
}


///The play functions------------------------------------------------------------------------------------------------------------------------------------------------------------------

Select.playmu
{
	if isplayed != 0
	{
		isplayed = 0
		if boarddisplayed == 1
		{
			if nowshell == "Halloween shell"
			{
				"\p[2]\i[2004]"
			}
			else
			{
				"\1\i[2004]"
			}
		}
		
		--
		if paused == 1
		{
			if displaytest == 1
			{
				"* I paused the music.\n"
			}
			--
			_i=SAORI("saori\mciaudior.dll", "play")
			--
		if songplayed[0] == TOINT(songplayed[0])
			{
				_e=SAORI("saori\mcidonut.dll", "play")
			}
			--
			paused = 0
		}
		else
		{
			if displaytest == 1 && inbattle != 1
			{
				"* I stopped the music."
			}
			else
			{
				inbattle = 0
			}
			--
			_i=SAORI("saori\mciaudior.dll", "stop")
			_e=SAORI("saori\mcidonut.dll","stop")
		}
		
	}
	else
	{
		isplayed = 1
		if boarddisplayed == 1
		{
			if nowshell == "Halloween shell"
			{
				"\p[2]\i[2003]\i[9000]"
			}
			else
			{
				"\1\i[2003]\i[9000]"
			}
			
		}
		--
		if songpaused != songplayed
		{
			if displaytest == 1 && songplayed[0] != "..\mus_battle2.ogg"
			{
				"* It isn't one in pause so I load the new music.\n"
			}
			if ASEARCH(songplayed,muplayed) == -1
			{
				if ARRAYSIZE(muplayed) <= 0
				{
					muplayed = songplayed
				}
				else
				{
					muplayed = (muplayed,songplayed)
				}
			}
			--
			_i=SAORI("saori\mcidonut.dll", "stop")
			_e=SAORI("saori\mcidonut.dll","seek",songplayed[0])
			_i=SAORI("saori\mciaudior.dll","load","%(songplayed[0])")
		}
		//Bringing back paused to 0 and songpaused to empty because there is no music in pause.
		paused = 0
		--
		if displaytest == 1 && songplayed != "..\mus_battle2.ogg"
		{
			"* I play the music.\n\e"
		}
		--
		if songplayed == TOINT(songplayed)
		{
			_e=SAORI("saori\mcidonut.dll", "play")
		}
		--
		_i=SAORI("saori\mciaudior.dll", "play")
		songpaused = ""
		
	}	
}

Select.pausemu
{
	songpaused=songplayed
	paused=1
	Select.playmu
}

Select.previousmu
{
	_i=SAORI("saori\mcidonut.dll", "stop")
	isplayed = 0
	lastsong = totalsongs[ARRAYSIZE(totalsongs)-1]
	//Determine the index of the song.
	_nb = ASEARCH(songplayed,totalsongs)
	--
	//If the song isn't the first, it uses the index to play the previous one, if it's the first song, the last of the playlist would be played.
	if playmode != "random"
	{
		if _nb >= 1
		{
			songplayed = totalsongs[_nb-1]
		}
		else
		{
			songplayed = lastsong
		}
		Select.playmu
	}
	else
	{
		_nb = ASEARCH(songplayed,muplayed)
		if _nb == 0
		{
			songplayed = ANY(totalsongs)
			if ARRAYSIZE(totalsongs) > ARRAYSIZE(muplayed)
			{
				while ASEARCH(songplayed,muplayed) != -1
				{
					songplayed = ANY(totalsongs)
				}
			}
			else
			{
				muplayed = IARRAY
			}
			
			isplayed = 1
			if boarddisplayed == 1
			{
				"\1\i[2003]\i[9000]"
			}
			_i=SAORI("saori\mcidonut.dll", "stop")
			_e=SAORI("saori\mcidonut.dll","seek",songplayed[0])
			_i=SAORI("saori\mciaudior.dll","load","%(songplayed[0])")
			if songplayed == TOINT(songplayed)
			{
				_e=SAORI("saori\mcidonut.dll", "play")
			}
			_i=SAORI("saori\mciaudior.dll", "play")
			songpaused = ""
			paused = 0
			muplayed = (songplayed,muplayed)
		}
		else
		{
			songplayed = muplayed[_nb-1]
			isplayed = 1
			if boarddisplayed == 1
			{
				"\1\i[2003]\i[9000]"
			}
			_i=SAORI("saori\mcidonut.dll", "stop")
			_e=SAORI("saori\mcidonut.dll","seek",songplayed[0])
			_i=SAORI("saori\mciaudior.dll","load","%(songplayed[0])")
			if songplayed == TOINT(songplayed)
			{
				_e=SAORI("saori\mcidonut.dll", "play")
			}
			_i=SAORI("saori\mciaudior.dll", "play")
			songpaused = ""
			paused = 0
		}
	}
	
}

Select.nextmu
{
	_i=SAORI("saori\mcidonut.dll", "stop")
	isplayed = 0
	lastsong = totalsongs[ARRAYSIZE(totalsongs)-1]
	//The loop will check all the songs until find the 
	if playmode != "random"
	{
		if songplayed == lastsong
		{
			songplayed = totalsongs[0]
		}
		else
		{
			_nb = ASEARCH(songplayed,totalsongs)
			songplayed = totalsongs[_nb+1]
		}
	}
	else
	{
		_nb = ASEARCH(songplayed,muplayed)
		if _nb== ARRAYSIZE(muplayed)-1
		{
			songplayed = ANY(totalsongs)
			while ASEARCH(songplayed,muplayed) != -1
			{
				songplayed = ANY(totalsongs)
			}
		}
		else
		{
			songplayed = muplayed[_nb+1]
		}
	}
	Select.playmu
}

SelectableList
{
	_i = 1
	totalsongs = songlist
	while _i <= nbtracks
	{
		totalsongs = (totalsongs,_i)
		_i = _i + 1
	}
	_nb = 0
	_playlist = ""
	foreach songlist ; _song
	{
		if _song[1]==""
		{
			name = "%((SPLITPATH(_song))[2])"
		}
		else
		{
			name = _song[1]
		}
		_song="%((SPLITPATH(_song[0]))[2])"
		_song = REPLACE(_song,"[","t")
		_song = REPLACE(_song,"]","t")
		_song = REPLACE(_song,"(","t")
		_song = REPLACE(_song,")","t")
		_song = REPLACE(_song,"{","t")
		_song = REPLACE(_song,"}","t")
		_song = REPLACE(_song,"'","t")
		_song = REPLACE(_song,",","t")
		_song = REPLACE(_song,"\","t")
		_song = REPLACE(_song,"!","t")
		_playlist = _playlist + "\_a[%(_song)]\_q\![*]%(name)\_a"+"\_q\n"
		_nb= _nb + 1
	}
	if nbtracks >= 1
	{
		_i = 1
		while _i <= nbtracks
		{
			_playlist = _playlist + "\_a[%(_i)]\_q\![*]CD Track %(_i)\_a"+"\_q\n"
			_i = _i + 1
		}
	}
	--
	"%(_playlist)"
}

//When the player has finished to play a music.
OnMAAPlayFinish
{
	_f = SAORI("saori\mcidonut.dll", "stop")
	_f = SAORI("saori\mciaudior.dll","stop")
	_fs = 0
	isplayed = 0
	
	nbtracks = SAORI("saori\mcidonut.dll", "trackcount")
	_i = 1
	totalsongs = songlist
	while _i <= nbtracks
	{
		totalsongs = (totalsongs,_i)
		_i = _i + 1
	}
	lastsong = totalsongs[ARRAYSIZE(totalsongs)-1]
	//It verify in which mode it is and play the next music, return to the begin of the playlist, replay the same music, etc depend of the mode. 
	if playmode != "random"
	{
		if playmode != "onemu"
		{	
			if playmode != "onemuloop"
			{
				if songplayed != lastsong
				{
					foreach totalsongs ; song
					{
						if _fs !=1
						{
							if song == songplayed
							{
								_fs = 1
							}
						}
						elseif songplayed != lastsong
						{
							songplayed = song
							_fs = 0
							Select.playmu
						}
					}
				}
				else
				{
					if playmode !="oneplaylist"
					{
						songplayed = songlist[0]
						Select.playmu
					}
				}
			}
			else
			{
				Select.playmu
			}
		}
	}
	else
	{
		if ARRAYSIZE(muplayed) <= 0
		{
			muplayed = songplayed
		}
		else
		{
			muplayed = (muplayed, songplayed)
		}

		if (ARRAYSIZE(muplayed)) < (ARRAYSIZE(songlist)+nbtracks)
		{
			_chose = "other"
			while _chose != "right" || ARRAYSIZE(totalsongs)<=1
			{
				song = ANY(totalsongs)
				_chose = "right"
				foreach muplayed ; music
				{
					if music == song || song == songplayed
					{
						_chose = "other"
						//If the music has been played before, it would restart and chose a new music.
					}
					
				}
			}
			
		}
		else
		{
			song = ANY(totalsongs)
			//If all the playlist has been played, the player will restart to play the whole playlist and the function will restart to chose a new music.
			muplayed = IARRAY
			--
			if displaytest == 1
			{
				"* I reseted the playlist."
			}
			--
			while song == songplayed || ARRAYSIZE(totalsongs) <= 1
			{
				song = ANY(totalsongs)
			}
			
		}
		songplayed = song
		--
		Select.playmu
	}
	
}
OnMCIDonutTrackFinish
{
	_f=SAORI("saori\mcidonut.dll", "stop")
	_f = SAORI("saori\mciaudior.dll","stop")
	fs = 0
	isplayed = 0
	
	nbtracks = SAORI("saori\mcidonut.dll", "trackcount")
	_i = 1
	totalsongs = songlist
	while _i <= nbtracks
	{
		totalsongs = (totalsongs,_i)
		_i = _i + 1
	}
	lastsong = totalsongs[ARRAYSIZE(totalsongs)-1]
	//It verify in which mode it is and play the next music, return to the begin of the playlist, replay the same music, etc depend of the mode. 
	if playmode != "random"
	{
		if playmode != "onemu"
		{	
			if playmode != "onemuloop"
			{
				if songplayed != lastsong
				{
					foreach totalsongs ; song
					{
						if fs !=1
						{
							if song == songplayed
							{
								fs = 1
							}
						}
						elseif songplayed != lastsong
						{
							songplayed = song
							fs = 0
							Select.playmu
						}
					}
				}
				else
				{
					if playmode !="oneplaylist"
					{
						songplayed = songlist[0]
						Select.playmu
					}
				}
			}
			else
			{
				Select.playmu
			}
		}
	}
	else
	{
		if (ARRAYSIZE(muplayed)) < (ARRAYSIZE(songlist)+nbtracks)
		{
			chose = "other"
			while chose != "right" || ARRAYSIZE(totalsongs)<=1
			{
				song = ANY(totalsongs)
				chose = "right"
				--
				foreach muplayed ; music
				{
					if music == song || song == songplayed
					{
						chose = "other"
						//If the music has been played before, it would restart and chose a new music.
					}
					
				}
			}
			
		}
		else
		{
			song = ANY(totalsongs)
			//If all the playlist has been played, the player will restart to play the whole playlist and the function will restart to chose a new music.
			muplayed = IARRAY
			--
			if displaytest == 1
			{
				"* I reseted the playlist."
			}
			--
			while song == songplayed || ARRAYSIZE(totalsongs) <= 1
			{
				song = ANY(totalsongs)
			}
			
		}
		songplayed = song
		--
		Select.playmu
	}
	SAVEVAR
}

OnMCIDonutCDInsert
{
	nbtracks = SAORI("saori\mcidonut.dll", "trackcount")
	_i = 1
	totalsongs = songlist
	while _i <= nbtracks
	{
		totalsongs = (totalsongs,_i)
		_i = _i + 1
	}
}

OnMCIDonutCDEject
{
	if songplayed == TOINT(songplayed)
	{
		isplayed = 0
		paused = 0
		_f = SAORI("saori\mcidonut.dll", "stop")
	}
}

Select.showboard
{
	if holdobsidian == 1
	{
		"\0%(lsto)* I can't really do anything with my laptop right now."
		"\0%(lsto)* This isn't quite the right moment,\w5 you know ?"
		"\0%(lsto)* I can't do it with a cat in my arms."
	}
	else
	{
		_kero= "\1"
		if nowshell == "Halloween shell"
		{
			_kero = "\p[2]"
		}
		if boarddisplayed != 1
		{
			if asleep != 1
			{
				if oncomputer != 1
				{
					"* Yes, \w5two seconds."
					--
					if issat!= 1
					{
						"\![embed,OnChangePose]"
					}
					--
					"\![embed,OnOCComputer]"
				}
				--
				boarddisplayed = 1
				"\0* Alright,\w5 I link your computer to mine.\w9%(_kero)\s[2]\w9\0\n\n[half]* Done."
				--
				if isplayed == 1
				{
					"%(_kero)\i[2003]\i[9000]\e"
				}
				else
				{
					"\e"
				}
			}
			else
			{
				"\0%(lsta)She can't do anything right now.%(lsto)"
			}
		}
		else
		{
			boarddisplayed = 0
			"%(_kero)\s[-1]\1\f[bold,true]Music Player Disconnected\f[default]\e"
		}
	}
}

OnCreateMuInfo
{
	_j = "\_q\f[bold,true] - File name : \f[default]%(SPLITPATH(songplayed[0])[2])"
	if songplayed[1] != ""
	{
		_j += "\n\f[bold,true] - Track nickname : \f[default]%(songplayed[1])"
	}
	
	_j += "\n\f[bold,true] - Track name : \f[default]"
	_i = SAORI("saori\KI.dll","ExtractMP3","%(songplayed[0])","GetTrack")
	if (ASEARCH(_i,'id3 tag(v1) is not found','Target Not Found','204 No Content','arg0 is error','arg1 is error','arg2 is error')) != -1 {_i= "Unknown"}
	//_i = REPLACE(_i,"[","CHR(0x2c)")
	//_i = REPLACE(_i,"]","CHR(0x2d)")
	_j += _i + "\n\f[bold,true] - Artist : \f[default]"
	_i = SAORI("saori\KI.dll","ExtractMP3","%(songplayed[0])","GetArtist")
	if (ASEARCH(_i,'id3 tag(v1) is not found','Target Not Found','204 No Content','arg0 is error','arg1 is error','arg2 is error')) != -1 {_i= "Unknown"}
	//_i = REPLACE(_i,"[","CHR(0x2c)")
	//_i = REPLACE(_i,"]","CHR(0x2d)")
	_j += _i + "\n\f[bold,true] - Year : \f[default]"
	_i = SAORI("saori\KI.dll","ExtractMP3","%(songplayed[0])","GetYear")
	if (ASEARCH(_i,'id3 tag(v1) is not found','Target Not Found','204 No Content','arg0 is error','arg1 is error','arg2 is error')) != -1 {_i= "Unknown"}
	//_i = REPLACE(_i,"[","CHR(0x2c)")
	//_i = REPLACE(_i,"]","CHR(0x2d)")
	_j += _i + "\n\f[bold,true] - Comment : \f[default]"
	_i = SAORI("saori\KI.dll","ExtractMP3","%(songplayed[0])","GetComment")
	if (ASEARCH(_i,'id3 tag(v1) is not found','Target Not Found','204 No Content','arg0 is error','arg1 is error','arg2 is error')) != -1 {_i= "Unknown"}
	//_i = REPLACE(_i,"[","CHR(0x2c)")
	//_i = REPLACE(_i,"]","CHR(0x2d)")
	_j += _i + "\n\f[bold,true] - File path : \f[default]\_!%(songplayed)\_!" 
	
	_j
}

Select.SpeechRecognitionMenu
{
	"\1\_q"
	--
	if asleep !=1
	{
		if oncomputer != 1
		{
			"\0* Yes, \w5two seconds."
			--
			if issat!= 1
			{
				"\![embed,OnChangePose]"
			}
			--
			"\![embed,OnOCComputer]\w9\![raise,OnChoiceSelect,previousmu]\e"
		}
		"\0* Hmm ?"
		"\0* Yeah ?"
		"\0* ?"
	}
	else
	{
	
		"\0%(lsta)%(lsto)"
	}
	 
	--
	"\n\n[half]"
	--
	if isplayed == 1
	{
		"\![*]\q[Pause,pausemu]"
	}
	else
	{
		"\![*]\q[Play,playmu] "
	}
	--
	if isplayed == 1
	{
		"      \![*]\q[Stop,playmu]"
	}
	--
	"\n\![*]\q[Previous,previousmu]   \![*]\q[Next,nextmu]"
	--
	"\n\n[half]\![*]\q[Songs,voiceplaylist]     \![*]\q[Playlists,voiceplaylistlist]"
	--
	"\n\![*]\q[Remove,removewhich]    \![*]\q[Save,saveorupdate]"
	--
	"\n\n[half]\![*]\q[Settings,SRsetVR]    \![*]\q[Nothing,close]"
	--
	"\e \e"
}

OnPlayerPlaylist
{
	"\1\b2\f[bold,true]\_q - The playlist is '%(currentplaylist)'\n\n[half]\f[default]\_q"
	--
	"%(SelectableList)"
	--
	"\n\n[half]\![*]\q[Ok,close]    \![*]\q[Ask Azura,backmumenu]"
}

Select.voiceplaylist
{
	"\1\_q%(lsta)The playlist is '%(currentplaylist)'.%(lsto)\n\n[half]\_q"
	--
	"%(SelectableList)"
	--
	"\n\n[half]\![*]\q[Go back,SpeechRecognitionMenu]    \![*]\q[Ok,close]"
}

Select.voiceplaylistlist
{
	"\1\_q\![enter,passivemode]"
	--
	_myplaylists = ""
	--
	"%(lsta)Here are the playlists saved.%(lsto)\n\n[half]\_q"
	--
	//It creates the list of the playlists that would be displayed, each name would be an anchor word.
	foreach playlistlist ; _playlist
	{
		_myplaylists = _myplaylists + "\_a[%(_playlist)]\_q\![*]%(_playlist)\_a" + "\_q\n"
	}
	--
	//It's the option to load the playlist that isn't saved.
	if currentplaylist != "newone"
	{
		_myplaylists = _myplaylists + "\_a[prevplaylist]\_q\![*]Load the non saved playlist\_a" + "\_q\n"
	}
	--
	//It finally display all the name of the playlists.
	"%(_myplaylists)"
	--
	"\n\n[half]\![*]\q[Go back,SpeechRecognitionMenu]    \![*]\q[Ok,close]"
}

Select.startrename
{
	rename = 1
	Select.muinplaylist
}

RenameSong
{
	oldname=_argv[0]
	"\![open,inputbox,OnRenameSong,-1,%(oldname)]"
}

OnRenameSong
{
	_newname = reference0
	_size= ARRAYSIZE(songlist)
	
	for _i=0 ; _i<_size ; _i++
	{
		if "%(songlist[_i][1])" == "" && "%(songlist[_i][0])" != ""
		{
			_song = "%((SPLITPATH(songlist[_i][0]))[2])"
			_song = REPLACE(_song,"[","t")
			_song = REPLACE(_song,"]","t")
			_song = REPLACE(_song,"(","t")
			_song = REPLACE(_song,")","t")
			_song = REPLACE(_song,"{","t")
			_song = REPLACE(_song,"}","t")
			_song = REPLACE(_song,"'","t")
			_song = REPLACE(_song,",","t")
			_song = REPLACE(_song,"\","t")
			_song = REPLACE(_song,"!","t") 
			if _song == oldname
			{
				songlist[_i] = "%(songlist[_i][0]),%(_newname)"
				"\0* The song has been renamed. And I want %(oldname) and %(_newname)\e"
				break
			}
		}
		elseif songlist[_i][1] == oldname
		{
			songlist[_i] = "%(songlist[_i][0]),%(_newname)"
			"\0* The song has been renamed. And I want %(oldname) and %(_newname)\e"
			break
		}
	}
	--
	"\0* I didn't find the song to rename. And I want %(oldname) and %(_newname)\e"
}